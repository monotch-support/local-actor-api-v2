{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The Local Actor API is a HTTP JSON-REST based interface for requesting AMQP 1.0 (see AMQP 1.0) endpoints/connections for data delivery (for producing data) and data subscription (for consuming data). The API has been developed to support Basic Interface compliant C-ITS Actor connections with a C-ITS Interchange as defined by C-Roads (see C-Roads).</p> <p>This document currently only describes the part of the API that is relevant for setting up (and maintaining) deliveries and/or subscriptions.</p> <ul> <li>Clients that want to produce data will need to create and monitor a delivery using this API.</li> <li>Clients that want to consume data will need to create and monitor a subscription using this API.</li> </ul> <p>The creation of the delivery/subscription through this API will trigger a server side endpoint provisioning required for the client to start sending/receiving data.</p> <p>If the creation of the delivery or subscription is successful, the delivery/subscription must be \u201cpolled\u201d in order to obtain the current status and AMQP endpoints to use.</p>"},{"location":"#deliveries","title":"Deliveries","text":""},{"location":"#subscriptions","title":"Subscriptions","text":""},{"location":"amqp/","title":"AMQP 1.0","text":"<ul> <li>https://docs.oasis-open.org/amqp/core/v1.0/amqp-core-overview-v1.0.html</li> </ul>"},{"location":"amqp/#jms-message-selectors","title":"JMS Message Selectors","text":"<ul> <li>https://activemq.apache.org/components/classic/documentation/selectors</li> <li>https://www.ibm.com/docs/en/ibm-mq/9.4.x?topic=messages-message-selectors-in-jms</li> <li>https://www.ibm.com/docs/en/integration-bus/10.1?topic=bus-jms-message-selector</li> <li>https://docs.oracle.com/cd/E19957-01/816-5904-10/816-5904-10.pdf (chapter 3.8.1)</li> </ul>"},{"location":"c-roads/","title":"C-Roads","text":"<ul> <li>https://www.c-roads.eu/platform.html</li> <li>https://releases.c-roads.eu/</li> </ul>"},{"location":"connection-management/","title":"Connection Management","text":"<p>Even after successful connection of the initial AMQP connection(s), the delivery/subscription needs to be monitored by the client by polling the related endpoint.</p> <p>Warning</p> <p>If a created delivery or subscription is not polled for it\u2019s status, it will be deprovioned (deleted) after a certain time.</p> <p>The following changes need to be processed when polling deliveries/subscriptions:</p> <ul> <li>Status changes</li> <li>Added AMQP endpoints</li> <li>Removed AMQP endpoints</li> </ul> <p>In order to illustrate this concept a simplified sequence diagram is shown below:</p> <p></p>"},{"location":"examples/","title":"Code Examples","text":"Example Description Link Subscription (Python) Complete subscription workflow (CREATE \u2192 POLL \u2192 CONNECT \u2192 USE) GitHub Subscription (.NET) Complete subscription workflow (CREATE \u2192 POLL \u2192 CONNECT \u2192 USE) examples/subscription/dotnet Delivery (Python) Complete delivery workflow (CREATE \u2192 POLL \u2192 CONNECT \u2192 USE) GitHub Delivery (.NET) Complete delivery workflow (CREATE \u2192 POLL \u2192 CONNECT \u2192 USE) examples/delivery/dotnet Direct Subscription (Python) Direct AMQP connection with known endpoint examples/subscription-direct/python Direct Subscription (.NET) Direct AMQP connection with known endpoint examples/subscription-direct/dotnet Direct Delivery (Python) Direct AMQP connection with known endpoint examples/delivery-direct/python Direct Delivery (.NET) Direct AMQP connection with known endpoint examples/delivery-direct/dotnet"},{"location":"openapi/","title":"REST API","text":"<p>The following OpenAPI 3.0.3 specification can be downloaded here</p>"},{"location":"openapi/#local-actor-api-v2-20","title":"Local Actor API v2 2.0","text":""},{"location":"openapi/#subscriptions","title":"Subscriptions","text":""},{"location":"openapi/#post-actorcommonnamesubscriptions","title":"POST /{actorCommonName}/subscriptions","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <p>Request body</p> application/json <p><pre><code>{\n    \"selector\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"selector\": {\n            \"type\": \"string\"\n        }\n    },\n    \"title\": \"SubscriptionRequest\"\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"selector\": \"string\",\n    \"status\": \"REQUESTED\",\n    \"endpoints\": [\n        {\n            \"host\": \"string\",\n            \"port\": 0,\n            \"source\": \"string\",\n            \"maxBandwidth\": 0,\n            \"maxMessageRate\": 0\n        }\n    ],\n    \"lastUpdatedTimestamp\": 0\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"selector\": {\n            \"type\": \"string\"\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"enum\": [\n                \"REQUESTED\",\n                \"CREATED\",\n                \"ILLEGAL\",\n                \"NOT_VALID\",\n                \"NO_OVERLAP\",\n                \"RESUBSCRIBE\"\n            ]\n        },\n        \"endpoints\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/SubscriptionEndpoint\"\n            }\n        },\n        \"lastUpdatedTimestamp\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"title\": \"Subscription\"\n}\n</code></pre>"},{"location":"openapi/#get-actorcommonnamesubscriptions","title":"GET /{actorCommonName}/subscriptions","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"id\": \"string\",\n        \"selector\": \"string\",\n        \"status\": \"REQUESTED\",\n        \"endpoints\": [\n            {\n                \"host\": \"string\",\n                \"port\": 0,\n                \"source\": \"string\",\n                \"maxBandwidth\": 0,\n                \"maxMessageRate\": 0\n            }\n        ],\n        \"lastUpdatedTimestamp\": 0\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/Subscription\"\n    }\n}\n</code></pre>"},{"location":"openapi/#get-actorcommonnamesubscriptionssubscriptionid","title":"GET /{actorCommonName}/subscriptions/{subscriptionId}","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <code>subscriptionId</code> path string No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"selector\": \"string\",\n    \"status\": \"REQUESTED\",\n    \"endpoints\": [\n        {\n            \"host\": \"string\",\n            \"port\": 0,\n            \"source\": \"string\",\n            \"maxBandwidth\": 0,\n            \"maxMessageRate\": 0\n        }\n    ],\n    \"lastUpdatedTimestamp\": 0\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"selector\": {\n            \"type\": \"string\"\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"enum\": [\n                \"REQUESTED\",\n                \"CREATED\",\n                \"ILLEGAL\",\n                \"NOT_VALID\",\n                \"NO_OVERLAP\",\n                \"RESUBSCRIBE\"\n            ]\n        },\n        \"endpoints\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/SubscriptionEndpoint\"\n            }\n        },\n        \"lastUpdatedTimestamp\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"title\": \"Subscription\"\n}\n</code></pre>"},{"location":"openapi/#delete-actorcommonnamesubscriptionssubscriptionid","title":"DELETE /{actorCommonName}/subscriptions/{subscriptionId}","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <code>subscriptionId</code> path string No <p> Response 204 No Content </p>"},{"location":"openapi/#get-actorcommonnamesubscriptionscapabilities","title":"GET /{actorCommonName}/subscriptions/capabilities","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <code>selector</code> query string No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"application\": {\n            \"messageType\": \"string\",\n            \"protocolVersion\": \"string\",\n            \"publisherId\": \"string\",\n            \"publicationId\": \"string\",\n            \"originatingCountry\": \"string\",\n            \"quadTree\": [\n                \"string\"\n            ]\n        },\n        \"metadata\": {\n            \"shardCount\": 0,\n            \"infoURL\": \"string\",\n            \"redirectPolicy\": \"OPTIONAL\",\n            \"maxBandwidth\": 0,\n            \"maxMessageRate\": 0,\n            \"repetitionInterval\": 0\n        }\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/Capability\"\n    }\n}\n</code></pre>"},{"location":"openapi/#deliveries","title":"Deliveries","text":""},{"location":"openapi/#post-actorcommonnamedeliveries","title":"POST /{actorCommonName}/deliveries","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <p>Request body</p> application/json <p><pre><code>{\n    \"selector\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"selector\": {\n            \"type\": \"string\"\n        }\n    },\n    \"title\": \"DeliveryRequest\"\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"selector\": \"string\",\n    \"status\": \"REQUESTED\",\n    \"endpoints\": [\n        {\n            \"host\": \"string\",\n            \"port\": 0,\n            \"target\": \"string\",\n            \"selector\": \"string\",\n            \"maxBandwidth\": 0,\n            \"maxMessageRate\": 0\n        }\n    ],\n    \"lastUpdatedTimestamp\": 0\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"selector\": {\n            \"type\": \"string\"\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"enum\": [\n                \"REQUESTED\",\n                \"CREATED\",\n                \"ILLEGAL\",\n                \"NOT_VALID\",\n                \"NO_OVERLAP\"\n            ]\n        },\n        \"endpoints\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DeliveryEndpoint\"\n            }\n        },\n        \"lastUpdatedTimestamp\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"title\": \"Delivery\"\n}\n</code></pre>"},{"location":"openapi/#get-actorcommonnamedeliveries","title":"GET /{actorCommonName}/deliveries","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"id\": \"string\",\n        \"selector\": \"string\",\n        \"status\": \"REQUESTED\",\n        \"endpoints\": [\n            {\n                \"host\": \"string\",\n                \"port\": 0,\n                \"target\": \"string\",\n                \"selector\": \"string\",\n                \"maxBandwidth\": 0,\n                \"maxMessageRate\": 0\n            }\n        ],\n        \"lastUpdatedTimestamp\": 0\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/Delivery\"\n    }\n}\n</code></pre>"},{"location":"openapi/#get-actorcommonnamedeliveriesdeliveryid","title":"GET /{actorCommonName}/deliveries/{deliveryId}","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <code>deliveryId</code> path string No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"selector\": \"string\",\n    \"status\": \"REQUESTED\",\n    \"endpoints\": [\n        {\n            \"host\": \"string\",\n            \"port\": 0,\n            \"target\": \"string\",\n            \"selector\": \"string\",\n            \"maxBandwidth\": 0,\n            \"maxMessageRate\": 0\n        }\n    ],\n    \"lastUpdatedTimestamp\": 0\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\"\n        },\n        \"selector\": {\n            \"type\": \"string\"\n        },\n        \"status\": {\n            \"type\": \"string\",\n            \"enum\": [\n                \"REQUESTED\",\n                \"CREATED\",\n                \"ILLEGAL\",\n                \"NOT_VALID\",\n                \"NO_OVERLAP\"\n            ]\n        },\n        \"endpoints\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DeliveryEndpoint\"\n            }\n        },\n        \"lastUpdatedTimestamp\": {\n            \"type\": \"integer\"\n        }\n    },\n    \"title\": \"Delivery\"\n}\n</code></pre>"},{"location":"openapi/#delete-actorcommonnamedeliveriesdeliveryid","title":"DELETE /{actorCommonName}/deliveries/{deliveryId}","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <code>deliveryId</code> path string No <p> Response 204 No Content </p>"},{"location":"openapi/#get-actorcommonnamedeliveriescapabilities","title":"GET /{actorCommonName}/deliveries/capabilities","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <code>selector</code> query string No <p> Response 200 OK </p> application/json <p><pre><code>[\n    {\n        \"application\": {\n            \"messageType\": \"string\",\n            \"protocolVersion\": \"string\",\n            \"publisherId\": \"string\",\n            \"publicationId\": \"string\",\n            \"originatingCountry\": \"string\",\n            \"quadTree\": [\n                \"string\"\n            ]\n        },\n        \"metadata\": {\n            \"shardCount\": 0,\n            \"infoURL\": \"string\",\n            \"redirectPolicy\": \"OPTIONAL\",\n            \"maxBandwidth\": 0,\n            \"maxMessageRate\": 0,\n            \"repetitionInterval\": 0\n        }\n    }\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/Capability\"\n    }\n}\n</code></pre>"},{"location":"openapi/#capabilities","title":"Capabilities","text":""},{"location":"openapi/#post-actorcommonnamecapabilities","title":"POST /{actorCommonName}/capabilities","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <p>Request body</p> application/json <p><pre><code>{\n    \"application\": {\n        \"messageType\": \"string\",\n        \"protocolVersion\": \"string\",\n        \"publisherId\": \"string\",\n        \"publicationId\": \"string\",\n        \"originatingCountry\": \"string\",\n        \"quadTree\": [\n            \"string\"\n        ]\n    },\n    \"metadata\": {\n        \"shardCount\": 0,\n        \"infoURL\": \"string\",\n        \"redirectPolicy\": \"OPTIONAL\",\n        \"maxBandwidth\": 0,\n        \"maxMessageRate\": 0,\n        \"repetitionInterval\": 0\n    }\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"application\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"messageType\": {\n                    \"type\": \"string\"\n                },\n                \"protocolVersion\": {\n                    \"type\": \"string\"\n                },\n                \"publisherId\": {\n                    \"type\": \"string\"\n                },\n                \"publicationId\": {\n                    \"type\": \"string\"\n                },\n                \"originatingCountry\": {\n                    \"type\": \"string\"\n                },\n                \"quadTree\": {\n                    \"type\": \"array\",\n                    \"items\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        },\n        \"metadata\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"shardCount\": {\n                    \"type\": \"integer\",\n                    \"default\": 1\n                },\n                \"infoURL\": {\n                    \"type\": \"string\"\n                },\n                \"redirectPolicy\": {\n                    \"type\": \"string\",\n                    \"enum\": [\n                        \"OPTIONAL\",\n                        \"MANDATORY\",\n                        \"UNAVAILABLE\"\n                    ]\n                },\n                \"maxBandwidth\": {\n                    \"type\": \"integer\"\n                },\n                \"maxMessageRate\": {\n                    \"type\": \"integer\"\n                },\n                \"repetitionInterval\": {\n                    \"type\": \"integer\"\n                }\n            }\n        }\n    },\n    \"title\": \"Capability\"\n}\n</code></pre> <p> Response 200 OK </p> application/json Schema of the response body <pre><code>{\n    \"allOf\": [\n        {\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        {\n            \"$ref\": \"#/components/schemas/Capability\"\n        }\n    ],\n    \"title\": \"OnboardingCapability\"\n}\n</code></pre>"},{"location":"openapi/#get-actorcommonnamecapabilities","title":"GET /{actorCommonName}/capabilities","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <p> Response 200 OK </p> application/json <p><pre><code>[\n    null\n]\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/components/schemas/OnboardingCapability\"\n    }\n}\n</code></pre>"},{"location":"openapi/#get-actorcommonnamecapabilitiescapabilityid","title":"GET /{actorCommonName}/capabilities/{capabilityId}","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <code>capabilityId</code> path string No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>{\n    \"allOf\": [\n        {\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        {\n            \"$ref\": \"#/components/schemas/Capability\"\n        }\n    ],\n    \"title\": \"OnboardingCapability\"\n}\n</code></pre>"},{"location":"openapi/#delete-actorcommonnamecapabilitiescapabilityid","title":"DELETE /{actorCommonName}/capabilities/{capabilityId}","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <code>capabilityId</code> path string No <p> Response 204 No Content </p>"},{"location":"openapi/#certificates","title":"Certificates","text":""},{"location":"openapi/#post-actorcommonnamex509csr","title":"POST /{actorCommonName}/x509/csr","text":"<p>Input parameters</p> Parameter In Type Default Nullable Description <code>actorCommonName</code> path string No <p>Request body</p> application/json <p><pre><code>{\n    \"csr\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ3ZUQ0NBYVVDQVFBd2VERWdNQjRHQ1NxR1NJYjNEUUVKQVJZUmJHVmhibVJsY2tCdU0zSmtMbXhwWm1VeApNekF4QmdOVkJBTU1LbkJwYkc5MGFXNTBaWEpqYUdGdVoyVXVaWFV1ZEd4bGVDNXpaUzV1TTNKa0xteHBabVV1CmRHVnpkREVTTUJBR0ExVUVDZ3dKVGpOeVpDQk1hV1psTVFzd0NRWURWUVFHRXdKT1REQ0NBU0l3RFFZSktvWkkKaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMT0FsZ2hVR1dBY0tCS1ZxYXZXQnZsUHZTaURvdVhNV01oZwp0eGZFQ1pWNDlsYWxINjZLTTRlRExDMCtqWjlBWmpaNGg4TEYyQS9tZENkeE9UK1hlc3N0YjViSjZiRVZxTUkxCkp3RG1ITVZUaHlYWVhialIvU1JkaTUzS0xhcENGcjMrWC8wQi9aZ1F5Y29FNzMySVJMN2NlOVprQ2tuWTRyUEwKVkhrTVFLZVZ6RVEraTlaSGNmNkNmbTVMY1FJU0RrODB3MndTelBXcjF1b3JnTFJuYXN2N1pCenAyWXVjTHlkdAovMHBBa3BKeUJnejRra1Ixck4yOE5IeUM0RXQxdzdzOHFjcVZSMDFsRWRxdUlmUjVjMHJMdzdIZFZzT0EwOHR4ClN3NndlcmpMQndYV3FrT2tuUVdCd2lRZ0FXQmtRVE9pZHZaZ3RQaVZFMkNoSGVDQzVDY0NBd0VBQWFBQU1BMEcKQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUI0YnZOVG8vVjA3dlcrYnlGRFNoV1pOK05wR3hVbzVXV2N1Nzk1L2lLUgpjK2g5OXUvUnFWY1BPNXkvckJoTVovTUp6VEZZMko2Y3YyK0dZYkJqa1VhTm45MjE2RDhOQU1wRFR6bHEyVFR4CnROYWJ5eE5ubXJYVnZjUXhFZzRDdzlJN3ZXR0VvQzlCN1I1OGxiVGRDNG95M0VBc2J1dHJJT21PRGMvRWR1SnoKMnRSZ3pEeG9OVWRrWWREcFhyRkthTEczRXlTSjFsVEpuN3MzZEl6UCtkdElPOXBjVjJtMUZKQlpsanRWbmpUTgptM2h0UTZtN2JkbXBUTCtTdEEwTUtJZGFmWFE5R2xBS0cxdWNHNCs2RkR3RVhIZmJ4U2drQ3JyQzg0dWt5TGR1CjBJUWs1NUlqTjFnUy84TVZWN0cycm9uN01KSHBNeWFKaWhYMWNGRTd1TjhYCi0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"csr\": {\n            \"type\": \"string\",\n            \"example\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ3ZUQ0NBYVVDQVFBd2VERWdNQjRHQ1NxR1NJYjNEUUVKQVJZUmJHVmhibVJsY2tCdU0zSmtMbXhwWm1VeApNekF4QmdOVkJBTU1LbkJwYkc5MGFXNTBaWEpqYUdGdVoyVXVaWFV1ZEd4bGVDNXpaUzV1TTNKa0xteHBabVV1CmRHVnpkREVTTUJBR0ExVUVDZ3dKVGpOeVpDQk1hV1psTVFzd0NRWURWUVFHRXdKT1REQ0NBU0l3RFFZSktvWkkKaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMT0FsZ2hVR1dBY0tCS1ZxYXZXQnZsUHZTaURvdVhNV01oZwp0eGZFQ1pWNDlsYWxINjZLTTRlRExDMCtqWjlBWmpaNGg4TEYyQS9tZENkeE9UK1hlc3N0YjViSjZiRVZxTUkxCkp3RG1ITVZUaHlYWVhialIvU1JkaTUzS0xhcENGcjMrWC8wQi9aZ1F5Y29FNzMySVJMN2NlOVprQ2tuWTRyUEwKVkhrTVFLZVZ6RVEraTlaSGNmNkNmbTVMY1FJU0RrODB3MndTelBXcjF1b3JnTFJuYXN2N1pCenAyWXVjTHlkdAovMHBBa3BKeUJnejRra1Ixck4yOE5IeUM0RXQxdzdzOHFjcVZSMDFsRWRxdUlmUjVjMHJMdzdIZFZzT0EwOHR4ClN3NndlcmpMQndYV3FrT2tuUVdCd2lRZ0FXQmtRVE9pZHZaZ3RQaVZFMkNoSGVDQzVDY0NBd0VBQWFBQU1BMEcKQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUI0YnZOVG8vVjA3dlcrYnlGRFNoV1pOK05wR3hVbzVXV2N1Nzk1L2lLUgpjK2g5OXUvUnFWY1BPNXkvckJoTVovTUp6VEZZMko2Y3YyK0dZYkJqa1VhTm45MjE2RDhOQU1wRFR6bHEyVFR4CnROYWJ5eE5ubXJYVnZjUXhFZzRDdzlJN3ZXR0VvQzlCN1I1OGxiVGRDNG95M0VBc2J1dHJJT21PRGMvRWR1SnoKMnRSZ3pEeG9OVWRrWWREcFhyRkthTEczRXlTSjFsVEpuN3MzZEl6UCtkdElPOXBjVjJtMUZKQlpsanRWbmpUTgptM2h0UTZtN2JkbXBUTCtTdEEwTUtJZGFmWFE5R2xBS0cxdWNHNCs2RkR3RVhIZmJ4U2drQ3JyQzg0dWt5TGR1CjBJUWs1NUlqTjFnUy84TVZWN0cycm9uN01KSHBNeWFKaWhYMWNGRTd1TjhYCi0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=\"\n        }\n    }\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"certificates\": [\n        \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU0akNDQXNxZ0F3SUJBZ0lDRWowd0RRWUpLb1pJaHZjTkFRRU5CUUF3UnpFTE1Ba0dBMVVFQmhNQ1UwVXgKRXpBUkJnTlZCQW9NQ2s1dmNtUnBZeUJYWVhreEl6QWhCZ05WQkFNTUdtNTNNeTFwYm5SbGNtTm9ZVzVuWlMxagpZUzUwYkdWNExuTmxNQjRYRFRJeE1URXhPVEV4TURjME5Wb1hEVE15TURJeU5URXhNRGMwTlZvd2VERUxNQWtHCkExVUVCaE1DVGt3eEVqQVFCZ05WQkFvTUNVNHpjbVFnVEdsbVpURXpNREVHQTFVRUF3d3FjR2xzYjNScGJuUmwKY21Ob1lXNW5aUzVsZFM1MGJHVjRMbk5sTG00emNtUXViR2xtWlM1MFpYTjBNU0F3SGdZSktvWklodmNOQVFrQgpGaEZzWldGdVpHVnlRRzR6Y21RdWJHbG1aVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DCmdnRUJBTE9BbGdoVUdXQWNLQktWcWF2V0J2bFB2U2lEb3VYTVdNaGd0eGZFQ1pWNDlsYWxINjZLTTRlRExDMCsKalo5QVpqWjRoOExGMkEvbWRDZHhPVCtYZXNzdGI1Yko2YkVWcU1JMUp3RG1ITVZUaHlYWVhialIvU1JkaTUzSwpMYXBDRnIzK1gvMEIvWmdReWNvRTczMklSTDdjZTlaa0Nrblk0clBMVkhrTVFLZVZ6RVEraTlaSGNmNkNmbTVMCmNRSVNEazgwdzJ3U3pQV3IxdW9yZ0xSbmFzdjdaQnpwMll1Y0x5ZHQvMHBBa3BKeUJnejRra1Ixck4yOE5IeUMKNEV0MXc3czhxY3FWUjAxbEVkcXVJZlI1YzByTHc3SGRWc09BMDh0eFN3NndlcmpMQndYV3FrT2tuUVdCd2lRZwpBV0JrUVRPaWR2Wmd0UGlWRTJDaEhlQ0M1Q2NDQXdFQUFhT0JwakNCb3pBSkJnTlZIUk1FQWpBQU1CRUdDV0NHClNBR0crRUlCQVFRRUF3SUZvREF6QmdsZ2hrZ0JodmhDQVEwRUpoWWtUM0JsYmxOVFRDQkhaVzVsY21GMFpXUWcKUTJ4cFpXNTBJRU5sY25ScFptbGpZWFJsTUI4R0ExVWRJd1FZTUJhQUZFQWtPcjdwL1NPaUI1bTI5RElQMUZOKwpZMlYzTUE0R0ExVWREd0VCL3dRRUF3SUY0REFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQWdZSUt3WUJCUVVICkF3UXdEUVlKS29aSWh2Y05BUUVOQlFBRGdnSUJBQTAvTXRnOGlaR0t0Mzl0eHBnZWhMV2RSZkxnOVdUQWU5THkKMHgvK0k3RStwZW5mRGZnQW5tU0hVRG93eWo3OUlna1YxTGJETnBuMUEyZ01wTjA3QUwvY1pibUJ3RU14ZDc5cApTR3FjaVJsVlhYKzBhZGVXRDBDYWZlU0FBNE02eWlieldiYlAyREIzQ1BFOTNMTC8zYWN0YlNNTEhqOEFaeFRnCm1VN2lxVTRTd1QrR2hWR0czWFNRZWtZTTBXejJZZzluL2VRWUNDOHpQSzhMWFArbXNzWDVLaW5NMkR1a1IvY1IKblQ3K05LNzdZNzhicjlvUkJleGl3aURyb05UZU1DZFByQVVyRG05STlOQzlrbmZkOU8xTk4rSmlQZG9uNGZOdQpoV1VCWGU1WG8yZEhoNUJEVDNteWJ0MERyZ1hiVVVVQUNnUmdlcnFoa2dJQjA5MUIzWC9nYnZGbDl4SlUwUWwxCml5MUxhYUFaQWR4a2l2dmVmdVdtQnI2UW5sakZHbngxZ3JQcUtqNk5lY3N3ZWN2UjNhV0hTQXlOeWFENDB2MFQKRkRzZk9ZdFkya0t0LzNlQ0UvZk5oRWNLT2xuOVk5RkZJOE04YjVjYUwwS21nQjQ2bExQaHZrcUxrdUhTOXdNZwpGV3pUQlZtZXh4R1VCR2hJYVE3QW5FK0pFVUdtN3dVQWkxai9ZbUdrbG5MSFZTVXZ0Z283aDdJMkJnTjlwNSt4CnBrVkZkQ3hCdi8zTGcwdmRIeDQ3K1lRMCtYTGNhUjRyT0wvdDVReUNwNjFuN29OSFlOclFLUE5XdHZtVzZlbWwKVXQvdkZ6WlhrdysyVGN2TlFqeENBZTN4U0RGZHZMaE5ldzVFQjMvd05HZkVJSVZSZFNxblZOSmVqbEhIV0JCdwpVVzd5MkJuSAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"certificates\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"string\",\n                \"example\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUU0akNDQXNxZ0F3SUJBZ0lDRWowd0RRWUpLb1pJaHZjTkFRRU5CUUF3UnpFTE1Ba0dBMVVFQmhNQ1UwVXgKRXpBUkJnTlZCQW9NQ2s1dmNtUnBZeUJYWVhreEl6QWhCZ05WQkFNTUdtNTNNeTFwYm5SbGNtTm9ZVzVuWlMxagpZUzUwYkdWNExuTmxNQjRYRFRJeE1URXhPVEV4TURjME5Wb1hEVE15TURJeU5URXhNRGMwTlZvd2VERUxNQWtHCkExVUVCaE1DVGt3eEVqQVFCZ05WQkFvTUNVNHpjbVFnVEdsbVpURXpNREVHQTFVRUF3d3FjR2xzYjNScGJuUmwKY21Ob1lXNW5aUzVsZFM1MGJHVjRMbk5sTG00emNtUXViR2xtWlM1MFpYTjBNU0F3SGdZSktvWklodmNOQVFrQgpGaEZzWldGdVpHVnlRRzR6Y21RdWJHbG1aVENDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DCmdnRUJBTE9BbGdoVUdXQWNLQktWcWF2V0J2bFB2U2lEb3VYTVdNaGd0eGZFQ1pWNDlsYWxINjZLTTRlRExDMCsKalo5QVpqWjRoOExGMkEvbWRDZHhPVCtYZXNzdGI1Yko2YkVWcU1JMUp3RG1ITVZUaHlYWVhialIvU1JkaTUzSwpMYXBDRnIzK1gvMEIvWmdReWNvRTczMklSTDdjZTlaa0Nrblk0clBMVkhrTVFLZVZ6RVEraTlaSGNmNkNmbTVMCmNRSVNEazgwdzJ3U3pQV3IxdW9yZ0xSbmFzdjdaQnpwMll1Y0x5ZHQvMHBBa3BKeUJnejRra1Ixck4yOE5IeUMKNEV0MXc3czhxY3FWUjAxbEVkcXVJZlI1YzByTHc3SGRWc09BMDh0eFN3NndlcmpMQndYV3FrT2tuUVdCd2lRZwpBV0JrUVRPaWR2Wmd0UGlWRTJDaEhlQ0M1Q2NDQXdFQUFhT0JwakNCb3pBSkJnTlZIUk1FQWpBQU1CRUdDV0NHClNBR0crRUlCQVFRRUF3SUZvREF6QmdsZ2hrZ0JodmhDQVEwRUpoWWtUM0JsYmxOVFRDQkhaVzVsY21GMFpXUWcKUTJ4cFpXNTBJRU5sY25ScFptbGpZWFJsTUI4R0ExVWRJd1FZTUJhQUZFQWtPcjdwL1NPaUI1bTI5RElQMUZOKwpZMlYzTUE0R0ExVWREd0VCL3dRRUF3SUY0REFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQWdZSUt3WUJCUVVICkF3UXdEUVlKS29aSWh2Y05BUUVOQlFBRGdnSUJBQTAvTXRnOGlaR0t0Mzl0eHBnZWhMV2RSZkxnOVdUQWU5THkKMHgvK0k3RStwZW5mRGZnQW5tU0hVRG93eWo3OUlna1YxTGJETnBuMUEyZ01wTjA3QUwvY1pibUJ3RU14ZDc5cApTR3FjaVJsVlhYKzBhZGVXRDBDYWZlU0FBNE02eWlieldiYlAyREIzQ1BFOTNMTC8zYWN0YlNNTEhqOEFaeFRnCm1VN2lxVTRTd1QrR2hWR0czWFNRZWtZTTBXejJZZzluL2VRWUNDOHpQSzhMWFArbXNzWDVLaW5NMkR1a1IvY1IKblQ3K05LNzdZNzhicjlvUkJleGl3aURyb05UZU1DZFByQVVyRG05STlOQzlrbmZkOU8xTk4rSmlQZG9uNGZOdQpoV1VCWGU1WG8yZEhoNUJEVDNteWJ0MERyZ1hiVVVVQUNnUmdlcnFoa2dJQjA5MUIzWC9nYnZGbDl4SlUwUWwxCml5MUxhYUFaQWR4a2l2dmVmdVdtQnI2UW5sakZHbngxZ3JQcUtqNk5lY3N3ZWN2UjNhV0hTQXlOeWFENDB2MFQKRkRzZk9ZdFkya0t0LzNlQ0UvZk5oRWNLT2xuOVk5RkZJOE04YjVjYUwwS21nQjQ2bExQaHZrcUxrdUhTOXdNZwpGV3pUQlZtZXh4R1VCR2hJYVE3QW5FK0pFVUdtN3dVQWkxai9ZbUdrbG5MSFZTVXZ0Z283aDdJMkJnTjlwNSt4CnBrVkZkQ3hCdi8zTGcwdmRIeDQ3K1lRMCtYTGNhUjRyT0wvdDVReUNwNjFuN29OSFlOclFLUE5XdHZtVzZlbWwKVXQvdkZ6WlhrdysyVGN2TlFqeENBZTN4U0RGZHZMaE5ldzVFQjMvd05HZkVJSVZSZFNxblZOSmVqbEhIV0JCdwpVVzd5MkJuSAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"openapi/#schemas","title":"Schemas","text":""},{"location":"openapi/#capability","title":"Capability","text":"Name Type <code>application</code> Properties: <code>messageType, protocolVersion, publisherId, publicationId, originatingCountry, quadTree</code> <code>metadata</code> Properties: <code>shardCount, infoURL, redirectPolicy, maxBandwidth, maxMessageRate, repetitionInterval</code>"},{"location":"openapi/#certificatesignrequest","title":"CertificateSignRequest","text":"Name Type <code>csr</code> string"},{"location":"openapi/#certificatesignresponse","title":"CertificateSignResponse","text":"Name Type <code>certificates</code> Array&lt;string&gt;"},{"location":"openapi/#delivery","title":"Delivery","text":"Name Type <code>endpoints</code> Array&lt;DeliveryEndpoint&gt; <code>id</code> string <code>lastUpdatedTimestamp</code> integer <code>selector</code> string <code>status</code> string"},{"location":"openapi/#deliveryendpoint","title":"DeliveryEndpoint","text":"Name Type <code>host</code> string <code>maxBandwidth</code> integer <code>maxMessageRate</code> integer <code>port</code> integer <code>selector</code> string <code>target</code> string"},{"location":"openapi/#deliveryrequest","title":"DeliveryRequest","text":"Name Type <code>selector</code> string"},{"location":"openapi/#onboardingcapability","title":"OnboardingCapability","text":"<p>Type: </p>"},{"location":"openapi/#subscription","title":"Subscription","text":"Name Type <code>endpoints</code> Array&lt;SubscriptionEndpoint&gt; <code>id</code> string <code>lastUpdatedTimestamp</code> integer <code>selector</code> string <code>status</code> string"},{"location":"openapi/#subscriptionendpoint","title":"SubscriptionEndpoint","text":"Name Type <code>host</code> string <code>maxBandwidth</code> integer <code>maxMessageRate</code> integer <code>port</code> integer <code>source</code> string"},{"location":"openapi/#subscriptionrequest","title":"SubscriptionRequest","text":"Name Type <code>selector</code> string"},{"location":"security/","title":"Security","text":"<p>The API authentication is based on TLS Client Authentication. The API is exposed over HTTPS using TLS v1.3. A client side certificate is required to access the API. The client certificate\u2019s \u201ccommon name\u201d is used for identification of the client (<code>actorCommonName</code>).</p> <p>The AMQP connections are also secured by TLS v1.3 and require a client side certificate for authentication. The same client certificate must be used for both the API and the AMQP connections. Clients must be configured to use SASL-EXTERNAL as authentication mechanism since the client certificate\u2019s common name is used as client identity.</p> <p>In short:</p> <ul> <li>Uses TLS v1.3 with Client Certificate Authentication</li> <li>The certificate's Common Name (<code>CN</code>) is used as client identity (<code>actorCommonName</code>)</li> <li>SASL-EXTERNAL must be used for AMQP authentication</li> </ul>"},{"location":"usage-policy/","title":"Usage Policy","text":"<p>The API usage is subject to the following policies:</p> <ul> <li>GET/DELETE: max 1 request per 5 seconds per path</li> <li>POST: max 1 request per 30 seconds per path</li> </ul> <p>Warning</p> <p>If these policies are structurally violated the access to the API might be revoked.</p>"},{"location":"usage/","title":"Endpoints","text":""},{"location":"usage/#subscriptions","title":"Subscriptions","text":""},{"location":"usage/#create-subscription","title":"Create subscription","text":"<p><code>POST /{clientCommonName}/subscriptions</code></p> <p>Create a new subscription. <pre><code>{\n  \"selector\": \"&lt;JMS selector&gt;\"\n}\n</code></pre></p> <ul> <li>Empty selector: subscribe to all data  </li> <li>Example: <code>messageType = 'SPATEM' AND publisherId = 'NL12345'</code></li> </ul> <p>Response: <pre><code>{\n  \"id\": \"&lt;subscriptionId&gt;\",\n  \"status\": \"CREATED\",\n  \"endpoints\": [\n    {\n      \"host\": \"amqp.example.net\",\n      \"port\": 5671,\n      \"source\": \"/some/source\",\n      \"maxBandwidth\": 10000,\n      \"maxMessageRate\": 50\n    }\n  ],\n  \"lastUpdatedTimestamp\": 1713800000000\n}\n</code></pre></p>"},{"location":"usage/#get-all-subscriptions","title":"Get all subscriptions","text":"<p><code>GET /{clientCommonName}/subscriptions</code></p> <p>List all subscriptions.</p>"},{"location":"usage/#poll-subscription","title":"Poll subscription","text":"<p><code>GET /{clientCommonName}/subscriptions/{subscriptionId}</code></p> <p>Retrieve details of a specific subscription (for polling).</p>"},{"location":"usage/#delete-subscription","title":"Delete subscription","text":"<p><code>DELETE /{clientCommonName}/subscriptions/{subscriptionId}</code></p> <p>Delete a subscription. Returns HTTP <code>204</code>.</p>"},{"location":"usage/#deliveries","title":"Deliveries","text":""},{"location":"usage/#create-delivery","title":"Create delivery","text":"<p><code>POST /{clientCommonName}/deliveries</code></p> <p>Create a new delivery. <pre><code>{\n  \"selector\": \"&lt;JMS selector&gt;\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"id\": \"&lt;deliveryId&gt;\",\n  \"status\": \"CREATED\",\n  \"endpoints\": [\n    {\n      \"host\": \"amqp.example.net\",\n      \"port\": 5671,\n      \"target\": \"/some/target\",\n      \"maxBandwidth\": 5000,\n      \"maxMessageRate\": 20\n    }\n  ],\n  \"lastUpdatedTimestamp\": 1713800000000\n}\n</code></pre></p>"},{"location":"usage/#get-all-deliveries","title":"Get all deliveries","text":"<p><code>GET /{clientCommonName}/deliveries</code></p> <p>List all deliveries.</p>"},{"location":"usage/#poll-delivery","title":"Poll delivery","text":"<p><code>GET /{clientCommonName}/deliveries/{deliveryId}</code></p> <p>Retrieve details of a specific delivery (for polling).</p>"},{"location":"usage/#delete-delivery","title":"Delete delivery","text":"<p><code>DELETE /{clientCommonName}/deliveries/{deliveryId}</code></p> <p>Delete a delivery. Returns HTTP <code>204</code>.</p>"},{"location":"examples/delivery-direct/","title":"Direct delivery connection with known endpoint","text":"<p>This example demonstrates how to connect directly to a known AMQP endpoint for publishing messages without using the Actor API to create a delivery. This is useful when you already have the endpoint information from a previous delivery creation or when working with persistent delivery endpoints.</p>"},{"location":"examples/delivery-direct/#prerequisites","title":"Prerequisites","text":""},{"location":"examples/delivery-direct/#general-requirements","title":"General Requirements","text":"<ul> <li>Valid client certificate and private key in PEM format</li> <li>CA certificate in PEM format</li> <li>Known AMQP endpoint information (host, port, target address)</li> </ul>"},{"location":"examples/delivery-direct/#language-specific-requirements","title":"Language-Specific Requirements","text":"Python.NET <ul> <li>Python 3.x</li> <li>python-qpid-proton library</li> </ul> <ul> <li>.NET 6.0 or later</li> <li>AMQPNetLite NuGet package</li> </ul>"},{"location":"examples/delivery-direct/#environment-variables","title":"Environment Variables","text":"Variable Description Example <code>ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM</code> Path to client certificate and private key in PEM format <code>/path/to/client-cert-and-key.pem</code> <code>CA_CERTIFICATE_PEM</code> Path to CA certificate in PEM format <code>/path/to/ca-cert.pem</code> <code>MESSAGE_APPLICATION_PROPERTIES_JSON</code> Message properties in JSON format <code>{\"messageType\": \"TEST\", \"publisherId\": \"XX99999\", \"publicationId\": \"XX99999:TEST\", \"originatingCountry\": \"XX\", \"protocolVersion\": \"TEST:0.0.0\", \"quadTree\": \",1004,\"}</code> <code>ENDPOINT_HOST</code> AMQP endpoint hostname <code>amqp.example.com</code> <code>ENDPOINT_PORT</code> AMQP endpoint port <code>5671</code> <code>ENDPOINT_TARGET</code> AMQP target address for delivery <code>delivery-target-address</code>"},{"location":"examples/delivery-direct/#configuration","title":"Configuration","text":"Python.NET <pre><code>ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM=os.environ.get(\"ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM\", \"pem_with_x509_certificate_chain_and_private_key\")\nCA_CERTIFICATE_PEM=os.environ.get(\"CA_CERTIFICATE_PEM\", \"pem_with_x509_certificate\")\nMESSAGE_APPLICATION_PROPERTIES_JSON=os.environ.get(\"MESSAGE_APPLICATION_PROPERTIES_JSON\", \"message_application_properties_json\")\n\n# Pre-known endpoint information\nENDPOINT_HOST=os.environ.get(\"ENDPOINT_HOST\", \"amqp_endpoint_host\")\nENDPOINT_PORT=os.environ.get(\"ENDPOINT_PORT\", \"amqp_endpoint_port\")\nENDPOINT_TARGET=os.environ.get(\"ENDPOINT_TARGET\", \"amqp_endpoint_target_address\")\n</code></pre> <pre><code>    private static readonly string ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM = Environment.GetEnvironmentVariable(\"ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM\") ?? \"pem_with_x509_certificate_chain_and_private_key\";\n    private static readonly string CA_CERTIFICATE_PEM = Environment.GetEnvironmentVariable(\"CA_CERTIFICATE_PEM\") ?? \"pem_with_x509_certificate\";\n    private static readonly string MESSAGE_APPLICATION_PROPERTIES_JSON = Environment.GetEnvironmentVariable(\"MESSAGE_APPLICATION_PROPERTIES_JSON\") ?? \"message_application_properties_json\";\n\n    // Pre-known endpoint information\n    private static readonly string ENDPOINT_HOST = Environment.GetEnvironmentVariable(\"ENDPOINT_HOST\") ?? \"amqp_endpoint_host\";\n    private static readonly string ENDPOINT_PORT = Environment.GetEnvironmentVariable(\"ENDPOINT_PORT\") ?? \"amqp_endpoint_port\";\n    private static readonly string ENDPOINT_TARGET = Environment.GetEnvironmentVariable(\"ENDPOINT_TARGET\") ?? \"amqp_endpoint_target_address\";\n</code></pre> <p>Explanation</p> <p>Configuration by environment variables for certificates and pre-known endpoint information</p>"},{"location":"examples/delivery-direct/#amqp-10-client","title":"AMQP 1.0 Client","text":"Python.NET <pre><code>def amqp_create_ssl_config():\n    ssl_config = SSLDomain(SSLDomain.MODE_CLIENT)\n    ssl_config.set_peer_authentication(SSLDomain.ANONYMOUS_PEER)\n    ssl_config.set_credentials(cert_file=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM, key_file=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM, password=None)\n    ssl_config.set_trusted_ca_db(CA_CERTIFICATE_PEM)\n    return ssl_config\n\nclass Sender(MessagingHandler):\n    def __init__(self, endpoint):\n        super(Sender, self).__init__()\n        self.__endpoint = endpoint\n\n    def on_start(self, event):\n        logging.debug(\"Container reactor started\")\n        container = event.container\n        endpoint = self.__endpoint\n\n        # Step 1: connect\n        ssl_config = amqp_create_ssl_config()\n        amqp_url = \"amqps://%s:%s\" % (endpoint[\"host\"], endpoint[\"port\"])\n        connection = container.connect(amqp_url, ssl_domain = ssl_config, reconnect = False, heartbeat = 5)\n\n        # Step 2: create a sending link using the target address of the endpoint\n        self.sender_link = container.create_sender(connection, endpoint[\"target\"])\n        self.sending = True\n\n    def send_message(self):\n        self.sending = False\n        message = Message(body=\"Hello World!\", properties=json.loads(MESSAGE_APPLICATION_PROPERTIES_JSON))\n        logging.info(\"Sending message %s\", message)\n        self.sender_link.send(message)\n\n    def on_sendable(self, event):\n        if self.sending:\n            self.send_message()\n\n    def on_settled(self, event):\n        logging.info(\"Message %s settled\", event.delivery)\n        self.sending = True\n\n    def on_reactor_quiesced(self, event):\n        if self.sending:\n            self.send_message()\n\ndef amqp_connect_and_publish(endpoint):\n    sender = Sender(endpoint)\n    container = Container(sender)\n    thread = threading.Thread(name = \"AMQPClient\", target = container.run, daemon = True)\n    thread.start()\n    while thread.is_alive():\n        time.sleep(1)\n</code></pre> <pre><code>private static ConnectionFactory CreateConnectionFactory()\n{\n    var factory = new ConnectionFactory();\n\n    try\n    {\n        // Configure SSL/TLS with client certificate for SASL EXTERNAL\n        // Read the combined PEM file content\n        var certAndKeyPem = File.ReadAllText(ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM);\n        var clientCert = X509Certificate2.CreateFromPem(certAndKeyPem, certAndKeyPem);\n        factory.SSL.ClientCertificates.Add(clientCert);\n\n        // Enable SSL/TLS\n        factory.SSL.Protocols = System.Security.Authentication.SslProtocols.Tls12;\n\n        // Load CA certificate for validation\n        var caCertPem = File.ReadAllText(CA_CERTIFICATE_PEM);\n        var caCert = X509Certificate2.CreateFromPem(caCertPem);\n        factory.SSL.RemoteCertificateValidationCallback = (sender, cert, chain, errors) =&gt; {\n            // Validate against CA certificate\n            return ValidateCertificate(cert as X509Certificate2, caCert);\n        };\n\n        // Extract common name for SASL EXTERNAL\n        var commonName = ExtractCommonName(clientCert.Subject);\n        LogDebug($\"Certificate Subject: {clientCert.Subject}\");\n        LogDebug($\"Extracted Common Name: {commonName}\");\n\n        // Configure custom SASL EXTERNAL profile that sends only the CN value\n        factory.SASL.Profile = new CustomSaslExternalProfile(commonName);\n    }\n    catch (Exception ex)\n    {\n        LogError($\"Error loading certificates: {ex.Message}\");\n        throw;\n    }\n\n    return factory;\n}\n\nprivate static bool ValidateCertificate(X509Certificate2? serverCert, X509Certificate2 caCert)\n{\n    if (serverCert == null || caCert == null)\n        return false;\n\n    var chain = new X509Chain();\n    chain.ChainPolicy.ExtraStore.Add(caCert);\n    chain.ChainPolicy.RevocationMode = X509RevocationMode.NoCheck;\n    chain.ChainPolicy.VerificationFlags = X509VerificationFlags.AllowUnknownCertificateAuthority;\n\n    return chain.Build(serverCert);\n}\n\nprivate static string ExtractCommonName(string subjectDn)\n{\n    // Extract CN value from Distinguished Name (e.g., \"CN=XX99999, O=Company\" -&gt; \"XX99999\")\n    var parts = subjectDn.Split(',');\n    foreach (var part in parts)\n    {\n        var trimmed = part.Trim();\n        if (trimmed.StartsWith(\"CN=\"))\n        {\n            return trimmed.Substring(3);\n        }\n    }\n    return subjectDn; // Fallback to full DN if CN not found\n}\n\n// Custom SASL EXTERNAL profile that sends only the CN value\npublic class CustomSaslExternalProfile : SaslProfile\n{\n    private readonly string identity;\n\n    public CustomSaslExternalProfile(string identity) : base(new Symbol(\"EXTERNAL\"))\n    {\n        this.identity = identity;\n    }\n\n    protected override DescribedList GetStartCommand(string hostname)\n    {\n        return new SaslInit()\n        {\n            Mechanism = \"EXTERNAL\",\n            InitialResponse = Encoding.UTF8.GetBytes(identity)\n        };\n    }\n\n    protected override DescribedList OnCommand(DescribedList command)\n    {\n        // For EXTERNAL, we should only need the initial response\n        return null!;\n    }\n\n    protected override ITransport UpgradeTransport(ITransport transport)\n    {\n        // No transport upgrade needed for EXTERNAL\n        return transport;\n    }\n}\n\nprivate static async Task AmqpConnectAndPublishAsync(DeliveryEndpoint endpoint)\n{\n    var factory = CreateConnectionFactory();\n\n    // Extract CN from certificate for user identity\n    var certAndKeyPem = File.ReadAllText(ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM);\n    var clientCert = X509Certificate2.CreateFromPem(certAndKeyPem, certAndKeyPem);\n    var commonName = ExtractCommonName(clientCert.Subject);\n\n    // Create connection with proper user identity\n    var address = new Address($\"amqps://{endpoint.Host}:{endpoint.Port}\");\n    var connection = await factory.CreateAsync(address);\n\n    var session = new Session(connection);\n    var sender = new SenderLink(session, \"sender-link\", endpoint.Target);\n\n    var messageProperties = JsonSerializer.Deserialize&lt;Dictionary&lt;string, JsonElement&gt;&gt;(MESSAGE_APPLICATION_PROPERTIES_JSON);\n\n    LogInfo(\"Starting to send messages continuously. Press Ctrl+C to stop.\");\n\n    var cts = new CancellationTokenSource();\n    Console.CancelKeyPress += (sender_event, e) =&gt; {\n        e.Cancel = true;\n        cts.Cancel();\n    };\n\n    int messageCount = 0;\n\n    try\n    {\n        while (!cts.Token.IsCancellationRequested)\n        {\n            messageCount++;\n            var message = new Message($\"Hello World! Message #{messageCount} at {DateTime.Now:HH:mm:ss}\")\n            {\n                ApplicationProperties = new ApplicationProperties()\n            };\n\n            foreach (var prop in messageProperties)\n            {\n                // Convert JsonElement to proper .NET types for AMQP\n                object value = prop.Value.ValueKind switch\n                {\n                    JsonValueKind.String =&gt; prop.Value.GetString(),\n                    JsonValueKind.Number =&gt; prop.Value.GetInt32(),\n                    JsonValueKind.True =&gt; true,\n                    JsonValueKind.False =&gt; false,\n                    JsonValueKind.Null =&gt; null,\n                    _ =&gt; prop.Value.ToString()\n                };\n                message.ApplicationProperties[prop.Key] = value;\n            }\n\n            // Format application properties for logging\n            var appPropsString = \"\";\n            if (message.ApplicationProperties != null &amp;&amp; message.ApplicationProperties.Map != null)\n            {\n                var props = message.ApplicationProperties.Map.Select(kvp =&gt; $\"{kvp.Key}={kvp.Value}\");\n                appPropsString = \" [\" + string.Join(\", \", props) + \"]\";\n            }\n\n            LogInfo($\"Sending message #{messageCount}: {message.Body}{appPropsString}\");\n            await sender.SendAsync(message);\n\n            // Wait 2 seconds before sending the next message\n            await Task.Delay(2000, cts.Token);\n        }\n    }\n    catch (OperationCanceledException)\n    {\n        LogInfo($\"Stopping message sending... Sent {messageCount} messages total.\");\n    }\n\n    await sender.CloseAsync();\n    await session.CloseAsync();\n    await connection.CloseAsync();\n}\n</code></pre> <p>Explanation</p> <p>AMQP 1.0 client implementation using python-qpid-proton library with SSL/TLS configuration</p>"},{"location":"examples/delivery-direct/#direct-connection-and-publishing","title":"Direct connection and publishing","text":"Python.NET <pre><code>def direct_publish():\n    try:\n        # Create endpoint from environment variables\n        endpoint = {\n            \"host\": ENDPOINT_HOST,\n            \"port\": ENDPOINT_PORT,\n            \"target\": ENDPOINT_TARGET\n        }\n\n        logging.info(\"Using pre-known endpoint %s\" % endpoint)\n        amqp_connect_and_publish(endpoint)\n\n    except Exception as e:\n        logging.warning(\"An exception occurred while running direct_publish: %s\" % e)\n</code></pre> <pre><code>private static async Task DirectPublishAsync()\n{\n    try\n    {\n        // Create endpoint from environment variables\n        var endpoint = new DeliveryEndpoint\n        {\n            Host = ENDPOINT_HOST,\n            Port = int.Parse(ENDPOINT_PORT),\n            Target = ENDPOINT_TARGET\n        };\n\n        LogInfo($\"Using pre-known endpoint {JsonSerializer.Serialize(endpoint)}\");\n        await AmqpConnectAndPublishAsync(endpoint);\n    }\n    catch (Exception e)\n    {\n        LogError($\"An exception occurred while running DirectPublish: {e.Message}\");\n    }\n}\n</code></pre> <p>Explanation</p> <p>Direct connection to AMQP endpoint using pre-configured host, port, and target address</p>"},{"location":"examples/delivery-direct/#full-examples","title":"Full examples","text":"Language Location Description Python examples/delivery-direct/python Direct AMQP connection with known endpoint .NET examples/delivery-direct/dotnet Direct AMQP connection with known endpoint"},{"location":"examples/delivery/","title":"Creating a delivery and sending data","text":"<p>This example demonstrates the complete workflow for creating a delivery and sending data through the Local Actor API v2. The workflow follows the pattern: CREATE \u2192 POLL \u2192 CONNECT \u2192 USE, where you first create a delivery via the REST API, poll for its status until it's ready, then connect to the provided AMQP endpoint to publish messages.</p>"},{"location":"examples/delivery/#prerequisites","title":"Prerequisites","text":""},{"location":"examples/delivery/#general-requirements","title":"General Requirements","text":"<ul> <li>Valid client certificate and private key in PEM format</li> <li>CA certificate in PEM format</li> <li>Access to a Local Actor API v2 instance</li> </ul>"},{"location":"examples/delivery/#language-specific-requirements","title":"Language-Specific Requirements","text":"Python.NET <ul> <li>Python 3.x</li> <li>python-qpid-proton library</li> <li>requests library</li> </ul> <ul> <li>.NET 6.0 or later</li> <li>AMQPNetLite NuGet package</li> </ul>"},{"location":"examples/delivery/#environment-variables","title":"Environment Variables","text":"Variable Description Example <code>ACTOR_API_HOST</code> Hostname of the Actor API instance <code>api.example.com</code> <code>ACTOR_API_PORT</code> Port of the Actor API instance <code>443</code> <code>ACTOR_API_DELIVERY_SELECTOR</code> Selector for the delivery to create <code>messageType = 'TEST'</code> <code>ACTOR_COMMON_NAME</code> Common name from the actor client certificate <code>actor.example.com</code> <code>ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM</code> Path to client certificate and private key in PEM format <code>/path/to/client-cert-and-key.pem</code> <code>CA_CERTIFICATE_PEM</code> Path to CA certificate in PEM format <code>/path/to/ca-cert.pem</code> <code>MESSAGE_APPLICATION_PROPERTIES_JSON</code> Message properties in JSON format <code>{\"messageType\": \"TEST\", \"publisherId\": \"XX99999\", \"publicationId\": \"XX99999:TEST\", \"originatingCountry\": \"XX\", \"protocolVersion\": \"TEST:0.0.0\", \"quadTree\": \",1004,\"}</code>"},{"location":"examples/delivery/#configuration","title":"Configuration","text":"Python.NET <pre><code>ACTOR_API_HOST=os.environ.get(\"ACTOR_API_HOST\", \"hostname_of_the_actor_api\")\nACTOR_API_PORT=os.environ.get(\"ACTOR_API_PORT\", \"port_of_the_actor_api\")\nACTOR_API_DELIVERY_SELECTOR=os.environ.get(\"ACTOR_API_DELIVERY_SELECTOR\", \"selector_of_the_delivery\")\nACTOR_COMMON_NAME=os.environ.get(\"ACTOR_COMMON_NAME\", \"cn_of_the_actor_client_certificate\")\nACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM=os.environ.get(\"ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM\", \"pem_with_x509_certificate_chain_and_private_key\")\nCA_CERTIFICATE_PEM=os.environ.get(\"CA_CERTIFICATE_PEM\", \"pem_with_x509_certificate\")\nMESSAGE_APPLICATION_PROPERTIES_JSON=os.environ.get(\"MESSAGE_APPLICATION_PROPERTIES_JSON\", \"message_application_properties_json\")\n</code></pre> <pre><code>    private static readonly string ACTOR_API_HOST = Environment.GetEnvironmentVariable(\"ACTOR_API_HOST\") ?? \"hostname_of_the_actor_api\";\n    private static readonly string ACTOR_API_PORT = Environment.GetEnvironmentVariable(\"ACTOR_API_PORT\") ?? \"port_of_the_actor_api\";\n    private static readonly string ACTOR_API_DELIVERY_SELECTOR = Environment.GetEnvironmentVariable(\"ACTOR_API_DELIVERY_SELECTOR\") ?? \"selector_of_the_delivery\";\n    private static readonly string ACTOR_COMMON_NAME = Environment.GetEnvironmentVariable(\"ACTOR_COMMON_NAME\") ?? \"cn_of_the_actor_client_certificate\";\n    private static readonly string ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM = Environment.GetEnvironmentVariable(\"ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM\") ?? \"pem_with_x509_certificate_chain_and_private_key\";\n    private static readonly string CA_CERTIFICATE_PEM = Environment.GetEnvironmentVariable(\"CA_CERTIFICATE_PEM\") ?? \"pem_with_x509_certificate\";\n    private static readonly string MESSAGE_APPLICATION_PROPERTIES_JSON = Environment.GetEnvironmentVariable(\"MESSAGE_APPLICATION_PROPERTIES_JSON\") ?? \"message_application_properties_json\";\n</code></pre> <p>Explanation</p> <p>Configuration by environment variables</p>"},{"location":"examples/delivery/#api-functions","title":"API Functions","text":"Python.NET <pre><code>def api_url(endpoint):\n    return \"https://%s:%s/%s/%s\" % (ACTOR_API_HOST, ACTOR_API_PORT, ACTOR_COMMON_NAME, endpoint) \n\ndef api_get(endpoint):\n    return requests.get(api_url(endpoint), verify=CA_CERTIFICATE_PEM, cert=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM)\n\ndef api_post(endpoint, json_data):\n    return requests.post(api_url(endpoint), None, json_data, verify=CA_CERTIFICATE_PEM, cert=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM)\n\ndef api_delete(endpoint):\n    return requests.delete(api_url(endpoint), verify=CA_CERTIFICATE_PEM, cert=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM)\n\ndef api_get_delivery(id):\n    return api_get(\"deliveries/%s\" % id)\n\ndef api_delete_delivery(id):\n    return api_delete(\"deliveries/%s\" % id)\n\ndef api_create_delivery():\n    json_data = {\n        \"selector\": ACTOR_API_DELIVERY_SELECTOR\n    }\n    return api_post(\"deliveries\", json_data)    \n</code></pre> <pre><code>private static string ApiUrl(string endpoint)\n{\n    return $\"https://{ACTOR_API_HOST}:{ACTOR_API_PORT}/{ACTOR_COMMON_NAME}/{endpoint}\";\n}\n\nprivate static async Task&lt;HttpResponseMessage&gt; ApiGetAsync(string endpoint, HttpClient client)\n{\n    return await client.GetAsync(ApiUrl(endpoint));\n}\n\nprivate static async Task&lt;HttpResponseMessage&gt; ApiPostAsync(string endpoint, object jsonData, HttpClient client)\n{\n    var json = JsonSerializer.Serialize(jsonData);\n    var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n    return await client.PostAsync(ApiUrl(endpoint), content);\n}\n\nprivate static async Task&lt;HttpResponseMessage&gt; ApiDeleteAsync(string endpoint, HttpClient client)\n{\n    return await client.DeleteAsync(ApiUrl(endpoint));\n}\n\nprivate static async Task&lt;HttpResponseMessage&gt; ApiGetDeliveryAsync(string id, HttpClient client)\n{\n    return await ApiGetAsync($\"deliveries/{id}\", client);\n}\n\nprivate static async Task&lt;HttpResponseMessage&gt; ApiDeleteDeliveryAsync(string id, HttpClient client)\n{\n    return await ApiDeleteAsync($\"deliveries/{id}\", client);\n}\n\nprivate static async Task&lt;HttpResponseMessage&gt; ApiCreateDeliveryAsync(HttpClient client)\n{\n    var jsonData = new { selector = ACTOR_API_DELIVERY_SELECTOR };\n    return await ApiPostAsync(\"deliveries\", jsonData, client);\n}\n</code></pre> <p>Explanation</p> <p>Implementation of the required delivery endpoints (see REST API Reference)</p>"},{"location":"examples/delivery/#amqp-10-client","title":"AMQP 1.0 Client","text":"Python.NET <pre><code>def amqp_create_ssl_config():\n    ssl_config = SSLDomain(SSLDomain.MODE_CLIENT)\n    ssl_config.set_peer_authentication(SSLDomain.ANONYMOUS_PEER)\n    ssl_config.set_credentials(cert_file=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM, key_file=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM, password=None)\n    ssl_config.set_trusted_ca_db(CA_CERTIFICATE_PEM)\n    return ssl_config\n\nclass Sender(MessagingHandler):\n    def __init__(self, endpoint):\n        super(Sender, self).__init__()\n        self.__endpoint = endpoint\n\n    def on_start(self, event):\n        logging.debug(\"Container reactor started\")\n        container = event.container\n        endpoint = self.__endpoint\n\n        # Step 1: connect\n        ssl_config = amqp_create_ssl_config()\n        amqp_url = \"amqps://%s:%s\" % (endpoint[\"host\"], endpoint[\"port\"])\n        connection = container.connect(amqp_url, ssl_domain = ssl_config, reconnect = False, heartbeat = 5)\n\n        # Step 2: create a sending link using the target address of the endpoint\n        self.sender_link = container.create_sender(connection, endpoint[\"target\"])\n        self.sending = True\n\n    def send_message(self):\n        self.sending = False\n        message = Message(body=\"Hello World!\", properties=json.loads(MESSAGE_APPLICATION_PROPERTIES_JSON))\n        logging.info(\"Sending message %s\", message)\n        self.sender_link.send(message)\n\n    def on_sendable(self, event):\n        if self.sending:\n            self.send_message()\n\n    def on_settled(self, event):\n        logging.info(\"Message %s settled\", event.delivery)\n        self.sending = True\n\n    def on_reactor_quiesced(self, event):\n        if self.sending:\n            self.send_message()\n\ndef amqp_connect_and_publish(endpoint):\n    sender = Sender(endpoint)\n    container = Container(sender)\n    thread = threading.Thread(name = \"AMQPClient\", target = container.run, daemon = True)\n    thread.start()\n    while thread.is_alive():\n        time.sleep(1)\n</code></pre> <pre><code>private static HttpClient CreateHttpClient()\n{\n    var handler = new HttpClientHandler();\n\n    try\n    {\n        // Load client certificate using the same method as AMQP\n        var certAndKeyPem = File.ReadAllText(ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM);\n        var clientCert = X509Certificate2.CreateFromPem(certAndKeyPem, certAndKeyPem);\n        handler.ClientCertificates.Add(clientCert);\n\n        // Load CA certificate for server validation\n        var caCertPem = File.ReadAllText(CA_CERTIFICATE_PEM);\n        var caCert = X509Certificate2.CreateFromPem(caCertPem);\n        handler.ServerCertificateCustomValidationCallback = (sender, cert, chain, errors) =&gt; {\n            return chain.ChainElements[chain.ChainElements.Count - 1].Certificate.Equals(caCert);\n        };\n    }\n    catch (Exception ex)\n    {\n        LogError($\"Error loading certificates for HTTP client: {ex.Message}\");\n        throw;\n    }\n\n    return new HttpClient(handler);\n}\n\nprivate static ConnectionFactory CreateConnectionFactory()\n{\n    var factory = new ConnectionFactory();\n\n    try\n    {\n        // Configure SSL/TLS with client certificate for SASL EXTERNAL\n        // Read the combined PEM file content\n        var certAndKeyPem = File.ReadAllText(ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM);\n        var clientCert = X509Certificate2.CreateFromPem(certAndKeyPem, certAndKeyPem);\n        factory.SSL.ClientCertificates.Add(clientCert);\n\n        // Enable SSL/TLS\n        factory.SSL.Protocols = System.Security.Authentication.SslProtocols.Tls12;\n\n        // Load CA certificate for validation\n        var caCertPem = File.ReadAllText(CA_CERTIFICATE_PEM);\n        var caCert = X509Certificate2.CreateFromPem(caCertPem);\n        factory.SSL.RemoteCertificateValidationCallback = (sender, cert, chain, errors) =&gt; {\n            // Validate against CA certificate\n            return ValidateCertificate(cert as X509Certificate2, caCert);\n        };\n\n        // Extract common name for SASL EXTERNAL\n        var commonName = ExtractCommonName(clientCert.Subject);\n        LogDebug($\"Certificate Subject: {clientCert.Subject}\");\n        LogDebug($\"Extracted Common Name: {commonName}\");\n\n        // Configure custom SASL EXTERNAL profile that sends only the CN value\n        factory.SASL.Profile = new CustomSaslExternalProfile(commonName);\n    }\n    catch (Exception ex)\n    {\n        LogError($\"Error loading certificates: {ex.Message}\");\n        throw;\n    }\n\n    return factory;\n}\n\nprivate static bool ValidateCertificate(X509Certificate2? serverCert, X509Certificate2 caCert)\n{\n    if (serverCert == null || caCert == null)\n        return false;\n\n    var chain = new X509Chain();\n    chain.ChainPolicy.ExtraStore.Add(caCert);\n    chain.ChainPolicy.RevocationMode = X509RevocationMode.NoCheck;\n    chain.ChainPolicy.VerificationFlags = X509VerificationFlags.AllowUnknownCertificateAuthority;\n\n    return chain.Build(serverCert);\n}\n\nprivate static string ExtractCommonName(string subjectDn)\n{\n    // Extract CN value from Distinguished Name (e.g., \"CN=XX99999, O=Company\" -&gt; \"XX99999\")\n    var parts = subjectDn.Split(',');\n    foreach (var part in parts)\n    {\n        var trimmed = part.Trim();\n        if (trimmed.StartsWith(\"CN=\"))\n        {\n            return trimmed.Substring(3);\n        }\n    }\n    return subjectDn; // Fallback to full DN if CN not found\n}\n\n// Custom SASL EXTERNAL profile that sends only the CN value\npublic class CustomSaslExternalProfile : SaslProfile\n{\n    private readonly string identity;\n\n    public CustomSaslExternalProfile(string identity) : base(new Symbol(\"EXTERNAL\"))\n    {\n        this.identity = identity;\n    }\n\n    protected override DescribedList GetStartCommand(string hostname)\n    {\n        return new SaslInit()\n        {\n            Mechanism = \"EXTERNAL\",\n            InitialResponse = Encoding.UTF8.GetBytes(identity)\n        };\n    }\n\n    protected override DescribedList OnCommand(DescribedList command)\n    {\n        // For EXTERNAL, we should only need the initial response\n        return null!;\n    }\n\n    protected override ITransport UpgradeTransport(ITransport transport)\n    {\n        // No transport upgrade needed for EXTERNAL\n        return transport;\n    }\n}\n\nprivate static async Task AmqpConnectAndPublishAsync(DeliveryEndpoint endpoint)\n{\n    var factory = CreateConnectionFactory();\n\n    // Extract CN from certificate for user identity\n    var certAndKeyPem = File.ReadAllText(ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM);\n    var clientCert = X509Certificate2.CreateFromPem(certAndKeyPem, certAndKeyPem);\n    var commonName = ExtractCommonName(clientCert.Subject);\n\n    // Create connection with proper user identity\n    var address = new Address($\"amqps://{endpoint.Host}:{endpoint.Port}\");\n    var connection = await factory.CreateAsync(address);\n\n    var session = new Session(connection);\n    var sender = new SenderLink(session, \"sender-link\", endpoint.Target);\n\n    var messageProperties = JsonSerializer.Deserialize&lt;Dictionary&lt;string, JsonElement&gt;&gt;(MESSAGE_APPLICATION_PROPERTIES_JSON);\n\n    LogInfo(\"Starting to send messages continuously. Press Ctrl+C to stop.\");\n\n    var cts = new CancellationTokenSource();\n    Console.CancelKeyPress += (sender_event, e) =&gt; {\n        e.Cancel = true;\n        cts.Cancel();\n    };\n\n    int messageCount = 0;\n\n    try\n    {\n        while (!cts.Token.IsCancellationRequested)\n        {\n            messageCount++;\n            var message = new Message($\"Hello World! Message #{messageCount} at {DateTime.Now:HH:mm:ss}\")\n            {\n                ApplicationProperties = new ApplicationProperties()\n            };\n\n            foreach (var prop in messageProperties)\n            {\n                // Convert JsonElement to proper .NET types for AMQP\n                object value = prop.Value.ValueKind switch\n                {\n                    JsonValueKind.String =&gt; prop.Value.GetString(),\n                    JsonValueKind.Number =&gt; prop.Value.GetInt32(),\n                    JsonValueKind.True =&gt; true,\n                    JsonValueKind.False =&gt; false,\n                    JsonValueKind.Null =&gt; null,\n                    _ =&gt; prop.Value.ToString()\n                };\n                message.ApplicationProperties[prop.Key] = value;\n            }\n\n            // Format application properties for logging\n            var appPropsString = \"\";\n            if (message.ApplicationProperties != null &amp;&amp; message.ApplicationProperties.Map != null)\n            {\n                var props = message.ApplicationProperties.Map.Select(kvp =&gt; $\"{kvp.Key}={kvp.Value}\");\n                appPropsString = \" [\" + string.Join(\", \", props) + \"]\";\n            }\n\n            LogInfo($\"Sending message #{messageCount}: {message.Body}{appPropsString}\");\n            await sender.SendAsync(message);\n\n            // Wait 2 seconds before sending the next message\n            await Task.Delay(2000, cts.Token);\n        }\n    }\n    catch (OperationCanceledException)\n    {\n        LogInfo($\"Stopping message sending... Sent {messageCount} messages total.\");\n    }\n\n    await sender.CloseAsync();\n    await session.CloseAsync();\n    await connection.CloseAsync();\n}\n</code></pre>"},{"location":"examples/delivery/#create-a-delivery","title":"Create a delivery","text":"Python.NET <pre><code>delivery_create_response = api_create_delivery()\ndelivery_create_response_json = delivery_create_response.json();\n</code></pre> <pre><code>var deliveryCreateResponse = await ApiCreateDeliveryAsync(client);\nvar deliveryCreateResponseContent = await deliveryCreateResponse.Content.ReadAsStringAsync();\nvar deliveryCreateResponseJson = JsonSerializer.Deserialize&lt;DeliveryCreateResponse&gt;(deliveryCreateResponseContent);\n</code></pre>"},{"location":"examples/delivery/#poll-the-delivery","title":"Poll the delivery","text":"Python.NET <pre><code>delivery_id = delivery_create_response_json[\"id\"]\ndelivery_status_response = api_get_delivery(delivery_id)\ndelivery_status_response_json = delivery_status_response.json()\nlog_json(\"Delivery %s status response\" % delivery_id, delivery_status_response_json)\ndelivery_status = delivery_status_response_json[\"status\"]\n</code></pre> <pre><code>var deliveryId = deliveryCreateResponseJson.Id;\nvar deliveryStatusResponse = await ApiGetDeliveryAsync(deliveryId, client);\nvar deliveryStatusResponseContent = await deliveryStatusResponse.Content.ReadAsStringAsync();\nvar deliveryStatusResponseJson = JsonSerializer.Deserialize&lt;DeliveryStatusResponse&gt;(deliveryStatusResponseContent);\nLogJson($\"Delivery {deliveryId} status response\", deliveryStatusResponseJson);\nvar deliveryStatus = deliveryStatusResponseJson.Status;\n</code></pre>"},{"location":"examples/delivery/#keep-polling-the-delivery-while-requested","title":"Keep polling the delivery while <code>REQUESTED</code>","text":"Python.NET <pre><code>while delivery_status == \"REQUESTED\":\n    time.sleep(2)\n    delivery_status_response = api_get_delivery(delivery_id)\n    delivery_status_response_json = delivery_status_response.json()\n    delivery_status = delivery_status_response_json[\"status\"]\n\nlog_json(\"Delivery %s status response\" % delivery_id, delivery_status_response_json)\n</code></pre> <pre><code>while (deliveryStatus == \"REQUESTED\")\n{\n    await Task.Delay(2000);\n    deliveryStatusResponse = await ApiGetDeliveryAsync(deliveryId, client);\n    deliveryStatusResponseContent = await deliveryStatusResponse.Content.ReadAsStringAsync();\n    deliveryStatusResponseJson = JsonSerializer.Deserialize&lt;DeliveryStatusResponse&gt;(deliveryStatusResponseContent);\n    deliveryStatus = deliveryStatusResponseJson.Status;\n}\n\nLogJson($\"Delivery {deliveryId} status response\", deliveryStatusResponseJson);\n</code></pre>"},{"location":"examples/delivery/#use-the-endpoint-information-to-connect","title":"Use the endpoint information to connect","text":"Python.NET <pre><code>if delivery_status == \"CREATED\":\n    # NOTE to keep things simple, this code assumes that this response contains exactly one endpoint!\n    endpoint = delivery_status_response_json[\"endpoints\"][0]\n    logging.info(\"Using endpoint %s\" % endpoint)\n    amqp_connect_and_publish(endpoint)\n</code></pre> <pre><code>if (deliveryStatus == \"CREATED\")\n{\n    // NOTE to keep things simple, this code assumes that this response contains exactly one endpoint!\n    var endpoint = deliveryStatusResponseJson.Endpoints[0];\n    LogInfo($\"Using endpoint {JsonSerializer.Serialize(endpoint)}\");\n    await AmqpConnectAndPublishAsync(endpoint);\n}\n</code></pre>"},{"location":"examples/delivery/#full-examples","title":"Full examples","text":"Language Location Description Python examples/delivery/python Complete workflow: CREATE \u2192 POLL \u2192 CONNECT \u2192 USE .NET examples/delivery/dotnet Complete workflow: CREATE \u2192 POLL \u2192 CONNECT \u2192 USE"},{"location":"examples/subscription-direct/","title":"Direct subscription connection with known endpoint","text":"<p>This example demonstrates how to connect directly to a known AMQP endpoint for receiving messages without using the Actor API to create a subscription. This is useful when you already have the endpoint information from a previous subscription creation or when working with persistent subscription endpoints.</p>"},{"location":"examples/subscription-direct/#prerequisites","title":"Prerequisites","text":""},{"location":"examples/subscription-direct/#general-requirements","title":"General Requirements","text":"<ul> <li>Valid client certificate and private key in PEM format</li> <li>CA certificate in PEM format</li> <li>Known AMQP endpoint information (host, port, source address)</li> </ul>"},{"location":"examples/subscription-direct/#language-specific-requirements","title":"Language-Specific Requirements","text":"Python.NET <ul> <li>Python 3.x</li> <li>python-qpid-proton library</li> </ul> <ul> <li>.NET 6.0 or later</li> <li>AMQPNetLite NuGet package</li> </ul>"},{"location":"examples/subscription-direct/#environment-variables","title":"Environment Variables","text":"Variable Description Example <code>ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM</code> Path to client certificate and private key in PEM format <code>/path/to/client-cert-and-key.pem</code> <code>CA_CERTIFICATE_PEM</code> Path to CA certificate in PEM format <code>/path/to/ca-cert.pem</code> <code>ENDPOINT_HOST</code> AMQP endpoint hostname <code>amqp.example.com</code> <code>ENDPOINT_PORT</code> AMQP endpoint port <code>5671</code> <code>ENDPOINT_SOURCE</code> AMQP source address for subscription <code>subscription-source-address</code>"},{"location":"examples/subscription-direct/#configuration","title":"Configuration","text":"Python.NET <pre><code>ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM=os.environ.get(\"ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM\", \"pem_with_x509_certificate_chain_and_private_key\")\nCA_CERTIFICATE_PEM=os.environ.get(\"CA_CERTIFICATE_PEM\", \"pem_with_x509_certificate\")\n\n# Pre-known endpoint information\nENDPOINT_HOST=os.environ.get(\"ENDPOINT_HOST\", \"amqp_endpoint_host\")\nENDPOINT_PORT=os.environ.get(\"ENDPOINT_PORT\", \"amqp_endpoint_port\")\nENDPOINT_SOURCE=os.environ.get(\"ENDPOINT_SOURCE\", \"amqp_endpoint_source_address\")\n</code></pre> <pre><code>    private static readonly string ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM = Environment.GetEnvironmentVariable(\"ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM\") ?? \"pem_with_x509_certificate_chain_and_private_key\";\n    private static readonly string CA_CERTIFICATE_PEM = Environment.GetEnvironmentVariable(\"CA_CERTIFICATE_PEM\") ?? \"pem_with_x509_certificate\";\n\n    // Pre-known endpoint information\n    private static readonly string ENDPOINT_HOST = Environment.GetEnvironmentVariable(\"ENDPOINT_HOST\") ?? \"amqp_endpoint_host\";\n    private static readonly string ENDPOINT_PORT = Environment.GetEnvironmentVariable(\"ENDPOINT_PORT\") ?? \"amqp_endpoint_port\";\n    private static readonly string ENDPOINT_SOURCE = Environment.GetEnvironmentVariable(\"ENDPOINT_SOURCE\") ?? \"amqp_endpoint_source_address\";\n</code></pre> <p>Explanation</p> <p>Configuration by environment variables for certificates and pre-known endpoint information</p>"},{"location":"examples/subscription-direct/#amqp-10-client","title":"AMQP 1.0 Client","text":"Python.NET <pre><code>def amqp_create_ssl_config():\n    ssl_config = SSLDomain(SSLDomain.MODE_CLIENT)\n    ssl_config.set_peer_authentication(SSLDomain.ANONYMOUS_PEER)\n    ssl_config.set_credentials(cert_file=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM, key_file=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM, password=None)\n    ssl_config.set_trusted_ca_db(CA_CERTIFICATE_PEM)\n    return ssl_config\n\nclass Receiver(MessagingHandler):\n    def __init__(self, endpoint):\n        super(Receiver, self).__init__()\n        self.__endpoint = endpoint\n\n    def on_start(self, event):\n        logging.debug(\"Container reactor started\")\n        container = event.container\n        endpoint = self.__endpoint\n\n        # Step 1: connect\n        ssl_config = amqp_create_ssl_config()\n        amqp_url = \"amqps://%s:%s\" % (endpoint[\"host\"], endpoint[\"port\"])\n        connection = container.connect(amqp_url, ssl_domain = ssl_config, reconnect = False, heartbeat = 5)\n\n        # Step 2: create a receiving link using the source address of the endpoint\n        container.create_receiver(connection, endpoint[\"source\"])\n\n    def on_message(self, event):\n        logging.info(\"Message received: %s\", event.message)\n\ndef amqp_connect_and_listen(endpoint):\n    receiver = Receiver(endpoint)\n    container = Container(receiver)\n    thread = threading.Thread(name = \"AMQPClient\", target = container.run, daemon = True)\n    thread.start()\n    while thread.is_alive():\n        time.sleep(1)\n</code></pre> <pre><code>private static ConnectionFactory CreateConnectionFactory()\n{\n    var factory = new ConnectionFactory();\n\n    try\n    {\n        // Configure SSL/TLS with client certificate for SASL EXTERNAL\n        // Read the combined PEM file content\n        var certAndKeyPem = File.ReadAllText(ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM);\n        var clientCert = X509Certificate2.CreateFromPem(certAndKeyPem, certAndKeyPem);\n        factory.SSL.ClientCertificates.Add(clientCert);\n\n        // Enable SSL/TLS\n        factory.SSL.Protocols = System.Security.Authentication.SslProtocols.Tls12;\n\n        // Load CA certificate for validation\n        var caCertPem = File.ReadAllText(CA_CERTIFICATE_PEM);\n        var caCert = X509Certificate2.CreateFromPem(caCertPem);\n        factory.SSL.RemoteCertificateValidationCallback = (sender, cert, chain, errors) =&gt; {\n            // Validate against CA certificate\n            return ValidateCertificate(cert as X509Certificate2, caCert);\n        };\n\n        // Extract common name for SASL EXTERNAL\n        var commonName = ExtractCommonName(clientCert.Subject);\n        LogDebug($\"Certificate Subject: {clientCert.Subject}\");\n        LogDebug($\"Extracted Common Name: {commonName}\");\n\n        // Configure custom SASL EXTERNAL profile that sends only the CN value\n        factory.SASL.Profile = new CustomSaslExternalProfile(commonName);\n    }\n    catch (Exception ex)\n    {\n        LogError($\"Error loading certificates: {ex.Message}\");\n        throw;\n    }\n\n    return factory;\n}\n\nprivate static bool ValidateCertificate(X509Certificate2? serverCert, X509Certificate2 caCert)\n{\n    if (serverCert == null || caCert == null)\n        return false;\n\n    var chain = new X509Chain();\n    chain.ChainPolicy.ExtraStore.Add(caCert);\n    chain.ChainPolicy.RevocationMode = X509RevocationMode.NoCheck;\n    chain.ChainPolicy.VerificationFlags = X509VerificationFlags.AllowUnknownCertificateAuthority;\n\n    return chain.Build(serverCert);\n}\n\nprivate static string ExtractCommonName(string subjectDn)\n{\n    // Extract CN value from Distinguished Name (e.g., \"CN=XX99999, O=Company\" -&gt; \"XX99999\")\n    var parts = subjectDn.Split(',');\n    foreach (var part in parts)\n    {\n        var trimmed = part.Trim();\n        if (trimmed.StartsWith(\"CN=\"))\n        {\n            return trimmed.Substring(3);\n        }\n    }\n    return subjectDn; // Fallback to full DN if CN not found\n}\n\n// Custom SASL EXTERNAL profile that sends only the CN value\npublic class CustomSaslExternalProfile : SaslProfile\n{\n    private readonly string identity;\n\n    public CustomSaslExternalProfile(string identity) : base(new Symbol(\"EXTERNAL\"))\n    {\n        this.identity = identity;\n    }\n\n    protected override DescribedList GetStartCommand(string hostname)\n    {\n        return new SaslInit()\n        {\n            Mechanism = \"EXTERNAL\",\n            InitialResponse = Encoding.UTF8.GetBytes(identity)\n        };\n    }\n\n    protected override DescribedList OnCommand(DescribedList command)\n    {\n        // For EXTERNAL, we should only need the initial response\n        return null!;\n    }\n\n    protected override ITransport UpgradeTransport(ITransport transport)\n    {\n        // No transport upgrade needed for EXTERNAL\n        return transport;\n    }\n}\n\nprivate static void PrintMessageDetails(Message message)\n{\n    var appPropsString = \"\";\n    if (message.ApplicationProperties != null &amp;&amp; message.ApplicationProperties.Map != null)\n    {\n        var props = message.ApplicationProperties.Map.Select(kvp =&gt; $\"{kvp.Key}={kvp.Value}\");\n        appPropsString = \" [\" + string.Join(\", \", props) + \"]\";\n    }\n\n    LogInfo($\"Message: {message.Body}{appPropsString}\");\n}\n\nprivate static async Task AmqpConnectAndListenAsync(SubscriptionEndpoint endpoint)\n{\n    var factory = CreateConnectionFactory();\n\n    // Extract CN from certificate for user identity\n    var certAndKeyPem = File.ReadAllText(ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM);\n    var clientCert = X509Certificate2.CreateFromPem(certAndKeyPem, certAndKeyPem);\n    var commonName = ExtractCommonName(clientCert.Subject);\n\n    // Create connection with proper user identity\n    var address = new Address($\"amqps://{endpoint.Host}:{endpoint.Port}\");\n    var connection = await factory.CreateAsync(address);\n\n    var session = new Session(connection);\n    var receiver = new ReceiverLink(session, \"receiver-link\", endpoint.Source);\n\n    LogInfo(\"Listening for messages. Press Ctrl+C to stop.\");\n\n    var cts = new CancellationTokenSource();\n    Console.CancelKeyPress += (sender, e) =&gt; {\n        e.Cancel = true;\n        cts.Cancel();\n    };\n\n    try\n    {\n        while (!cts.Token.IsCancellationRequested)\n        {\n            var message = await receiver.ReceiveAsync(TimeSpan.FromSeconds(1));\n            if (message != null)\n            {\n                PrintMessageDetails(message);\n                receiver.Accept(message);\n            }\n        }\n    }\n    catch (OperationCanceledException)\n    {\n        LogInfo(\"Stopping message listener...\");\n    }\n\n    await receiver.CloseAsync();\n    await session.CloseAsync();\n    await connection.CloseAsync();\n}\n</code></pre> <p>Explanation</p> <p>AMQP 1.0 client implementation using python-qpid-proton library with SSL/TLS configuration</p>"},{"location":"examples/subscription-direct/#direct-connection-and-subscription","title":"Direct connection and subscription","text":"Python.NET <pre><code>def direct_subscribe():\n    try:\n        # Create endpoint from environment variables\n        endpoint = {\n            \"host\": ENDPOINT_HOST,\n            \"port\": ENDPOINT_PORT,\n            \"source\": ENDPOINT_SOURCE\n        }\n\n        logging.info(\"Using pre-known endpoint %s\" % endpoint)\n        amqp_connect_and_listen(endpoint)\n\n    except Exception as e:\n        logging.warning(\"An exception occurred while running direct_subscribe: %s\" % e)\n</code></pre> <pre><code>private static async Task DirectSubscribeAsync()\n{\n    try\n    {\n        // Create endpoint from environment variables\n        var endpoint = new SubscriptionEndpoint\n        {\n            Host = ENDPOINT_HOST,\n            Port = int.Parse(ENDPOINT_PORT),\n            Source = ENDPOINT_SOURCE\n        };\n\n        LogInfo($\"Using pre-known endpoint {JsonSerializer.Serialize(endpoint)}\");\n        await AmqpConnectAndListenAsync(endpoint);\n    }\n    catch (Exception e)\n    {\n        LogError($\"An exception occurred while running DirectSubscribe: {e.Message}\");\n    }\n}\n</code></pre> <p>Explanation</p> <p>Direct connection to AMQP endpoint using pre-configured host, port, and source address</p>"},{"location":"examples/subscription-direct/#full-examples","title":"Full examples","text":"Language Location Description Python examples/subscription-direct/python Direct AMQP connection with known endpoint .NET examples/subscription-direct/dotnet Direct AMQP connection with known endpoint"},{"location":"examples/subscription/","title":"Creating a subscription and receiving data","text":"<p>This example demonstrates the complete workflow for creating a subscription and receiving data through the Local Actor API v2. The workflow follows the pattern: CREATE \u2192 POLL \u2192 CONNECT \u2192 USE, where you first create a subscription via the REST API, poll for its status until it's ready, then connect to the provided AMQP endpoint to receive messages.</p>"},{"location":"examples/subscription/#prerequisites","title":"Prerequisites","text":""},{"location":"examples/subscription/#general-requirements","title":"General Requirements","text":"<ul> <li>Valid client certificate and private key in PEM format</li> <li>CA certificate in PEM format</li> <li>Access to a Local Actor API v2 instance</li> </ul>"},{"location":"examples/subscription/#language-specific-requirements","title":"Language-Specific Requirements","text":"Python.NET <ul> <li>Python 3.x</li> <li>python-qpid-proton library</li> <li>requests library</li> </ul> <ul> <li>.NET 6.0 or later</li> <li>AMQPNetLite NuGet package</li> </ul>"},{"location":"examples/subscription/#environment-variables","title":"Environment Variables","text":"Variable Description Example <code>ACTOR_API_HOST</code> Hostname of the Actor API instance <code>api.example.com</code> <code>ACTOR_API_PORT</code> Port of the Actor API instance <code>443</code> <code>ACTOR_API_SUBSCRIPTION_SELECTOR</code> Selector for the subscription to create <code>messageType = 'TEST'</code> <code>ACTOR_COMMON_NAME</code> Common name from the actor client certificate <code>actor.example.com</code> <code>ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM</code> Path to client certificate and private key in PEM format <code>/path/to/client-cert-and-key.pem</code> <code>CA_CERTIFICATE_PEM</code> Path to CA certificate in PEM format <code>/path/to/ca-cert.pem</code>"},{"location":"examples/subscription/#configuration","title":"Configuration","text":"Python.NET <pre><code>ACTOR_API_HOST=os.environ.get(\"ACTOR_API_HOST\", \"hostname_of_the_actor_api\")\nACTOR_API_PORT=os.environ.get(\"ACTOR_API_PORT\", \"port_of_the_actor_api\")\nACTOR_API_SUBSCRIPTION_SELECTOR=os.environ.get(\"ACTOR_API_SUBSCRIPTION_SELECTOR\", \"selector_of_the_subscription\")\nACTOR_COMMON_NAME=os.environ.get(\"ACTOR_COMMON_NAME\", \"cn_of_the_actor_client_certificate\")\nACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM=os.environ.get(\"ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM\", \"pem_with_x509_certificate_chain_and_private_key\")\nCA_CERTIFICATE_PEM=os.environ.get(\"CA_CERTIFICATE_PEM\", \"pem_with_x509_certificate\")\n</code></pre> <pre><code>    private static readonly string ACTOR_API_HOST = Environment.GetEnvironmentVariable(\"ACTOR_API_HOST\") ?? \"hostname_of_the_actor_api\";\n    private static readonly string ACTOR_API_PORT = Environment.GetEnvironmentVariable(\"ACTOR_API_PORT\") ?? \"port_of_the_actor_api\";\n    private static readonly string ACTOR_API_SUBSCRIPTION_SELECTOR = Environment.GetEnvironmentVariable(\"ACTOR_API_SUBSCRIPTION_SELECTOR\") ?? \"selector_of_the_subscription\";\n    private static readonly string ACTOR_COMMON_NAME = Environment.GetEnvironmentVariable(\"ACTOR_COMMON_NAME\") ?? \"cn_of_the_actor_client_certificate\";\n    private static readonly string ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM = Environment.GetEnvironmentVariable(\"ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM\") ?? \"pem_with_x509_certificate_chain_and_private_key\";\n    private static readonly string CA_CERTIFICATE_PEM = Environment.GetEnvironmentVariable(\"CA_CERTIFICATE_PEM\") ?? \"pem_with_x509_certificate\";\n\n    // ======== LOGGING ========\n    private static void LogInfo(string message)\n    {\n        Console.WriteLine($\"{DateTime.Now:yyyy-MM-dd HH:mm:ss,fff} INFO {message}\");\n    }\n\n    private static void LogError(string message)\n    {\n        Console.WriteLine($\"{DateTime.Now:yyyy-MM-dd HH:mm:ss,fff} ERROR {message}\");\n    }\n\n    private static void LogDebug(string message)\n    {\n        Console.WriteLine($\"{DateTime.Now:yyyy-MM-dd HH:mm:ss,fff} DEBUG {message}\");\n    }\n</code></pre> <p>Explanation</p> <p>Configuration by environment variables</p>"},{"location":"examples/subscription/#api-functions","title":"API Functions","text":"Python.NET <pre><code>def api_url(endpoint):\n    return \"https://%s:%s/%s/%s\" % (ACTOR_API_HOST, ACTOR_API_PORT, ACTOR_COMMON_NAME, endpoint) \n\ndef api_get(endpoint):\n    return requests.get(api_url(endpoint), verify=CA_CERTIFICATE_PEM, cert=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM)\n\ndef api_post(endpoint, json_data):\n    return requests.post(api_url(endpoint), None, json_data, verify=CA_CERTIFICATE_PEM, cert=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM)\n\ndef api_delete(endpoint):\n    return requests.delete(api_url(endpoint), verify=CA_CERTIFICATE_PEM, cert=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM)\n\ndef api_get_subscription(id):\n    return api_get(\"subscriptions/%s\" % id)\n\ndef api_delete_subscription(id):\n    return api_delete(\"subscriptions/%s\" % id)\n\ndef api_create_subscription():\n    json_data = {\n        \"selector\": ACTOR_API_SUBSCRIPTION_SELECTOR\n    }\n    return api_post(\"subscriptions\", json_data) \n</code></pre> <pre><code>private static string ApiUrl(string endpoint)\n{\n    return $\"https://{ACTOR_API_HOST}:{ACTOR_API_PORT}/{ACTOR_COMMON_NAME}/{endpoint}\";\n}\n\nprivate static async Task&lt;HttpResponseMessage&gt; ApiGetAsync(string endpoint, HttpClient client)\n{\n    return await client.GetAsync(ApiUrl(endpoint));\n}\n\nprivate static async Task&lt;HttpResponseMessage&gt; ApiPostAsync(string endpoint, object jsonData, HttpClient client)\n{\n    var json = JsonSerializer.Serialize(jsonData);\n    var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n    return await client.PostAsync(ApiUrl(endpoint), content);\n}\n\nprivate static async Task&lt;HttpResponseMessage&gt; ApiDeleteAsync(string endpoint, HttpClient client)\n{\n    return await client.DeleteAsync(ApiUrl(endpoint));\n}\n\nprivate static async Task&lt;HttpResponseMessage&gt; ApiGetSubscriptionAsync(string id, HttpClient client)\n{\n    return await ApiGetAsync($\"subscriptions/{id}\", client);\n}\n\nprivate static async Task&lt;HttpResponseMessage&gt; ApiDeleteSubscriptionAsync(string id, HttpClient client)\n{\n    return await ApiDeleteAsync($\"subscriptions/{id}\", client);\n}\n\nprivate static async Task&lt;HttpResponseMessage&gt; ApiCreateSubscriptionAsync(HttpClient client)\n{\n    var jsonData = new { selector = ACTOR_API_SUBSCRIPTION_SELECTOR };\n    return await ApiPostAsync(\"subscriptions\", jsonData, client);\n}\n</code></pre> <p>Explanation</p> <p>Implementation of the required subscription endpoints (see REST API Reference)</p>"},{"location":"examples/subscription/#amqp-10-client","title":"AMQP 1.0 Client","text":"Python.NET <pre><code>def amqp_create_ssl_config():\n    ssl_config = SSLDomain(SSLDomain.MODE_CLIENT)\n    ssl_config.set_peer_authentication(SSLDomain.ANONYMOUS_PEER)\n    ssl_config.set_credentials(cert_file=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM, key_file=ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM, password=None)\n    ssl_config.set_trusted_ca_db(CA_CERTIFICATE_PEM)\n    return ssl_config\n\nclass Receiver(MessagingHandler):\n    def __init__(self, endpoint):\n        super(Receiver, self).__init__()\n        self.__endpoint = endpoint\n\n    def on_start(self, event):\n        logging.debug(\"Container reactor started\")\n        container = event.container\n        endpoint = self.__endpoint\n\n        # Step 1: connect\n        ssl_config = amqp_create_ssl_config()\n        amqp_url = \"amqps://%s:%s\" % (endpoint[\"host\"], endpoint[\"port\"])\n        connection = container.connect(amqp_url, ssl_domain = ssl_config, reconnect = False, heartbeat = 5)\n\n        # Step 2: create a receiving link using the source address of the endpoint\n        container.create_receiver(connection, endpoint[\"source\"])\n\n    def on_message(self, event):\n        logging.info(\"Message received: %s\", event.message)\n\ndef amqp_connect_and_listen(endpoint):\n    receiver = Receiver(endpoint)\n    container = Container(receiver)\n    thread = threading.Thread(name = \"AMQPClient\", target = container.run, daemon = True)\n    thread.start()\n    while thread.is_alive():\n        time.sleep(1)\n</code></pre> <pre><code>private static HttpClient CreateHttpClient()\n{\n    var handler = new HttpClientHandler();\n\n    try\n    {\n        // Load client certificate using the same method as AMQP\n        var certAndKeyPem = File.ReadAllText(ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM);\n        var clientCert = X509Certificate2.CreateFromPem(certAndKeyPem, certAndKeyPem);\n        handler.ClientCertificates.Add(clientCert);\n\n        // Load CA certificate for server validation\n        var caCertPem = File.ReadAllText(CA_CERTIFICATE_PEM);\n        var caCert = X509Certificate2.CreateFromPem(caCertPem);\n        handler.ServerCertificateCustomValidationCallback = (sender, cert, chain, errors) =&gt; {\n            return chain.ChainElements[chain.ChainElements.Count - 1].Certificate.Equals(caCert);\n        };\n    }\n    catch (Exception ex)\n    {\n        LogError($\"Error loading certificates for HTTP client: {ex.Message}\");\n        throw;\n    }\n\n    return new HttpClient(handler);\n}\n\nprivate static ConnectionFactory CreateConnectionFactory()\n{\n    var factory = new ConnectionFactory();\n\n    try\n    {\n        // Configure SSL/TLS with client certificate for SASL EXTERNAL\n        // Read the combined PEM file content\n        var certAndKeyPem = File.ReadAllText(ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM);\n        var clientCert = X509Certificate2.CreateFromPem(certAndKeyPem, certAndKeyPem);\n        factory.SSL.ClientCertificates.Add(clientCert);\n\n        // Enable SSL/TLS\n        factory.SSL.Protocols = System.Security.Authentication.SslProtocols.Tls12;\n\n        // Load CA certificate for validation\n        var caCertPem = File.ReadAllText(CA_CERTIFICATE_PEM);\n        var caCert = X509Certificate2.CreateFromPem(caCertPem);\n        factory.SSL.RemoteCertificateValidationCallback = (sender, cert, chain, errors) =&gt; {\n            // Validate against CA certificate\n            return ValidateCertificate(cert as X509Certificate2, caCert);\n        };\n\n        // Extract common name for SASL EXTERNAL\n        var commonName = ExtractCommonName(clientCert.Subject);\n        LogDebug($\"Certificate Subject: {clientCert.Subject}\");\n        LogDebug($\"Extracted Common Name: {commonName}\");\n\n        // Configure custom SASL EXTERNAL profile that sends only the CN value\n        factory.SASL.Profile = new CustomSaslExternalProfile(commonName);\n    }\n    catch (Exception ex)\n    {\n        LogError($\"Error loading certificates: {ex.Message}\");\n        throw;\n    }\n\n    return factory;\n}\n\nprivate static bool ValidateCertificate(X509Certificate2? serverCert, X509Certificate2 caCert)\n{\n    if (serverCert == null || caCert == null)\n        return false;\n\n    var chain = new X509Chain();\n    chain.ChainPolicy.ExtraStore.Add(caCert);\n    chain.ChainPolicy.RevocationMode = X509RevocationMode.NoCheck;\n    chain.ChainPolicy.VerificationFlags = X509VerificationFlags.AllowUnknownCertificateAuthority;\n\n    return chain.Build(serverCert);\n}\n\nprivate static string ExtractCommonName(string subjectDn)\n{\n    // Extract CN value from Distinguished Name (e.g., \"CN=XX99999, O=Company\" -&gt; \"XX99999\")\n    var parts = subjectDn.Split(',');\n    foreach (var part in parts)\n    {\n        var trimmed = part.Trim();\n        if (trimmed.StartsWith(\"CN=\"))\n        {\n            return trimmed.Substring(3);\n        }\n    }\n    return subjectDn; // Fallback to full DN if CN not found\n}\n\n// Custom SASL EXTERNAL profile that sends only the CN value\npublic class CustomSaslExternalProfile : SaslProfile\n{\n    private readonly string identity;\n\n    public CustomSaslExternalProfile(string identity) : base(new Symbol(\"EXTERNAL\"))\n    {\n        this.identity = identity;\n    }\n\n    protected override DescribedList GetStartCommand(string hostname)\n    {\n        return new SaslInit()\n        {\n            Mechanism = \"EXTERNAL\",\n            InitialResponse = Encoding.UTF8.GetBytes(identity)\n        };\n    }\n\n    protected override DescribedList OnCommand(DescribedList command)\n    {\n        // For EXTERNAL, we should only need the initial response\n        return null!;\n    }\n\n    protected override ITransport UpgradeTransport(ITransport transport)\n    {\n        // No transport upgrade needed for EXTERNAL\n        return transport;\n    }\n}\n\nprivate static void PrintMessageDetails(Message message)\n{\n    var appPropsString = \"\";\n    if (message.ApplicationProperties != null &amp;&amp; message.ApplicationProperties.Map != null)\n    {\n        var props = message.ApplicationProperties.Map.Select(kvp =&gt; $\"{kvp.Key}={kvp.Value}\");\n        appPropsString = \" [\" + string.Join(\", \", props) + \"]\";\n    }\n\n    LogInfo($\"Message: {message.Body}{appPropsString}\");\n}\n\nprivate static async Task AmqpConnectAndListenAsync(SubscriptionEndpoint endpoint)\n{\n    var factory = CreateConnectionFactory();\n\n    // Extract CN from certificate for user identity\n    var certAndKeyPem = File.ReadAllText(ACTOR_CERTIFICATE_CHAIN_AND_KEY_PEM);\n    var clientCert = X509Certificate2.CreateFromPem(certAndKeyPem, certAndKeyPem);\n    var commonName = ExtractCommonName(clientCert.Subject);\n\n    // Create connection with proper user identity\n    var address = new Address($\"amqps://{endpoint.Host}:{endpoint.Port}\");\n    var connection = await factory.CreateAsync(address);\n\n    var session = new Session(connection);\n    var receiver = new ReceiverLink(session, \"receiver-link\", endpoint.Source);\n\n    LogInfo(\"Listening for messages. Press Ctrl+C to stop.\");\n\n    var cts = new CancellationTokenSource();\n    Console.CancelKeyPress += (sender, e) =&gt; {\n        e.Cancel = true;\n        cts.Cancel();\n    };\n\n    try\n    {\n        while (!cts.Token.IsCancellationRequested)\n        {\n            var message = await receiver.ReceiveAsync(TimeSpan.FromSeconds(1));\n            if (message != null)\n            {\n                PrintMessageDetails(message);\n                receiver.Accept(message);\n            }\n        }\n    }\n    catch (OperationCanceledException)\n    {\n        LogInfo(\"Stopping message listener...\");\n    }\n\n    await receiver.CloseAsync();\n    await session.CloseAsync();\n    await connection.CloseAsync();\n}\n</code></pre>"},{"location":"examples/subscription/#create-a-subscription","title":"Create a subscription","text":"Python.NET <pre><code>subscription_create_response = api_create_subscription()\nsubscription_create_response_json = subscription_create_response.json();\n</code></pre> <pre><code>var subscriptionCreateResponse = await ApiCreateSubscriptionAsync(client);\nvar subscriptionCreateResponseContent = await subscriptionCreateResponse.Content.ReadAsStringAsync();\nLogDebug($\"Raw subscription create response: {subscriptionCreateResponseContent}\");\nLogDebug($\"HTTP Status Code: {subscriptionCreateResponse.StatusCode}\");\n\nvar subscriptionCreateResponseJson = JsonSerializer.Deserialize&lt;SubscriptionCreateResponse&gt;(subscriptionCreateResponseContent);\n</code></pre>"},{"location":"examples/subscription/#poll-the-subscription","title":"Poll the subscription","text":"Python.NET <pre><code>subscription_id = subscription_create_response_json[\"id\"]\nsubscription_status_response = api_get_subscription(subscription_id)\nsubscription_status_response_json = subscription_status_response.json()\nlog_json(\"Subscription %s status response\" % subscription_id, subscription_status_response_json)\nsubscription_status = subscription_status_response_json[\"status\"]\n</code></pre> <pre><code>var subscriptionId = subscriptionCreateResponseJson.Id;\nLogDebug($\"Subscription ID: '{subscriptionId}'\");\n\nif (string.IsNullOrEmpty(subscriptionId))\n{\n    LogError(\"Error: Subscription ID is empty or null\");\n    return;\n}\n\nvar subscriptionStatusResponse = await ApiGetSubscriptionAsync(subscriptionId, client);\nvar subscriptionStatusResponseContent = await subscriptionStatusResponse.Content.ReadAsStringAsync();\nLogDebug($\"Raw subscription status response: {subscriptionStatusResponseContent}\");\n\nvar subscriptionStatusResponseJson = JsonSerializer.Deserialize&lt;SubscriptionStatusResponse&gt;(subscriptionStatusResponseContent);\nLogJson($\"Subscription {subscriptionId} status response\", subscriptionStatusResponseJson);\nvar subscriptionStatus = subscriptionStatusResponseJson.Status;\n</code></pre>"},{"location":"examples/subscription/#keep-polling-the-subscription-while-requested","title":"Keep polling the subscription while <code>REQUESTED</code>","text":"Python.NET <pre><code>while subscription_status == \"REQUESTED\":\n    time.sleep(2)\n    subscription_status_response = api_get_subscription(subscription_id)\n    subscription_status_response_json = subscription_status_response.json()\n    subscription_status = subscription_status_response_json[\"status\"]\n\nlog_json(\"Subscription %s status response\" % subscription_id, subscription_status_response_json)\n</code></pre> <pre><code>while (subscriptionStatus == \"REQUESTED\")\n{\n    await Task.Delay(2000);\n    subscriptionStatusResponse = await ApiGetSubscriptionAsync(subscriptionId, client);\n    subscriptionStatusResponseContent = await subscriptionStatusResponse.Content.ReadAsStringAsync();\n    subscriptionStatusResponseJson = JsonSerializer.Deserialize&lt;SubscriptionStatusResponse&gt;(subscriptionStatusResponseContent);\n    subscriptionStatus = subscriptionStatusResponseJson.Status;\n}\n\nLogJson($\"Subscription {subscriptionId} status response\", subscriptionStatusResponseJson);\n</code></pre>"},{"location":"examples/subscription/#use-the-endpoint-information-to-connect","title":"Use the endpoint information to connect","text":"Python.NET <pre><code>if subscription_status == \"CREATED\":\n    # NOTE to keep things simple, this code assumes that this response contains exactly one endpoint!\n    endpoint = subscription_status_response_json[\"endpoints\"][0]\n    logging.info(\"Using endpoint %s\" % endpoint)\n    amqp_connect_and_listen(endpoint)\n</code></pre> <pre><code>if (subscriptionStatus == \"CREATED\")\n{\n    // NOTE to keep things simple, this code assumes that this response contains exactly one endpoint!\n    var endpoint = subscriptionStatusResponseJson.Endpoints[0];\n    LogInfo($\"Using endpoint {JsonSerializer.Serialize(endpoint)}\");\n    await AmqpConnectAndListenAsync(endpoint);\n}\n</code></pre>"},{"location":"examples/subscription/#full-examples","title":"Full examples","text":"Language Location Description Python examples/subscription/python Complete workflow: CREATE \u2192 POLL \u2192 CONNECT \u2192 USE .NET examples/subscription/dotnet Complete workflow: CREATE \u2192 POLL \u2192 CONNECT \u2192 USE"}]}